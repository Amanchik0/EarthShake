// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ EventsTab.tsx

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Community } from '../../types/community';
import styles from '../../features/Community/CommunityEditPage/CommunityEditPage.module.css';

interface Event {
  id: string;
  title: string;
  description: string;
  dateTime: string;
  participantsCount: number;
  status: 'active' | 'postponed' | 'cancelled';
  eventType: 'REGULAR' | 'EMERGENCY';
  author: string;
  city: string;
  mediaUrl: string[];
}

interface EventsTabProps {
  community: Community;
  onMessage: (message: string) => void;
  onCommunityUpdate?: (updatedCommunity: Community) => void; // –ö–æ–ª–ª–±–µ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
}

const EventsTab: React.FC<EventsTabProps> = ({ 
  community, 
  onMessage, 
  onCommunityUpdate 
}) => {
  const navigate = useNavigate();
  const [events, setEvents] = useState<Event[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [deletingEventId, setDeletingEventId] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
  useEffect(() => {
    if (community.listEvents && community.listEvents.length > 0) {
      loadEvents(community.listEvents);
    }
  }, [community.listEvents]);

  const loadEvents = async (eventIds: string[]) => {
    setLoading(true);
    
    try {
      const token = localStorage.getItem('accessToken');
      const eventPromises = eventIds.map(async (eventId) => {
        try {
          const response = await fetch(`http://localhost:8090/api/events/${eventId}`, {
            headers: {
              Authorization: `Bearer ${token}`
            }
          });

          if (!response.ok) {
            console.warn(` –°–æ–±—ã—Ç–∏–µ ${eventId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (${response.status})`);
            return null;
          }

          const eventData = await response.json();
          
          return {
            id: eventData.id,
            title: eventData.title,
            description: eventData.description,
            dateTime: eventData.dateTime,
            participantsCount: eventData.usersIds?.length || 0,
            status: eventData.archived ? 'cancelled' : 'active',
            eventType: eventData.eventType,
            author: eventData.author,
            city: eventData.city,
            mediaUrl: eventData.mediaUrl || []
          };
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è ${eventId}:`, error);
          return null;
        }
      });

      const loadedEvents = await Promise.all(eventPromises);
      const validEvents = loadedEvents.filter((event): event is Event => event !== null);
      
      setEvents(validEvents);
      console.log(` –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${validEvents.length} —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
      onMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π');
    } finally {
      setLoading(false);
    }
  };

  /**
   * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
   * –í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:
   * 1. –ü—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
   * 2. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ API
   * 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ listEvents –∏ eventsCount)
   * 4. –û–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫
   * 5. –ê—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—Ç–∫–∞—Ç–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
   */
  const handleDeleteEvent = async (eventId: string) => {
    const event = events.find(e => e.id === eventId);
    if (!event) return;

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    const currentUser = localStorage.getItem('username');
    const canDelete = currentUser === community.author || currentUser === event.author;
    
    if (!canDelete) {
      onMessage('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Å–ø–∏—Å–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    if (!community.listEvents.includes(eventId)) {
      onMessage('–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞');
      setEvents(prev => prev.filter(e => e.id !== eventId)); // –£–±–∏—Ä–∞–µ–º –∏–∑ UI
      return;
    }

    // 3. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö
    const hasParticipants = event.participantsCount > 0;
    const warningMessage = hasParticipants 
      ? `–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ "${event.title}"?\n\n–í–ù–ò–ú–ê–ù–ò–ï: –í —Å–æ–±—ã—Ç–∏–∏ ${event.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –û–Ω–∏ –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—Ç–º–µ–Ω–µ.`
      : `–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ "${event.title}"?`;

    const confirmed = window.confirm(warningMessage);
    if (!confirmed) return;

    setDeletingEventId(eventId);

    try {
      const token = localStorage.getItem('accessToken');

      console.log(`üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ${eventId}...`);

      // 4. –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ API
      const deleteResponse = await fetch(`http://localhost:8090/api/events/${eventId}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${token}`
        }
      });

      // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –æ—Ç–≤–µ—Ç–∞
      let eventDeleted = false;
      
      if (deleteResponse.status === 404) {
        // –°–æ–±—ã—Ç–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å DELETE)
        console.log('üìù –°–æ–±—ã—Ç–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ');
        eventDeleted = true;
      } else if (deleteResponse.status === 403) {
        throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
      } else if (deleteResponse.status === 409) {
        throw new Error('–°–æ–±—ã—Ç–∏–µ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å');
      } else if (!deleteResponse.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${deleteResponse.status}`);
      } else {
        console.log(' –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ API');
        eventDeleted = true;
      }

      // 6. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ (—É–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ listEvents)
      if (eventDeleted) {
        const updateSuccess = await updateCommunityEventsList(eventId, event.title);
        
        if (updateSuccess) {
          // 7. –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
          setEvents(prev => prev.filter(e => e.id !== eventId));
          console.log(' –°–æ–±—ã—Ç–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–æ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        } else {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
          onMessage(`–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.`);
        }
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
      onMessage(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
    } finally {
      setDeletingEventId(null);
    }
  };

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
   * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  const updateCommunityEventsList = async (deletedEventId: string, eventTitle: string): Promise<boolean> => {
    try {
      const token = localStorage.getItem('accessToken');
      
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ: —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ ${deletedEventId} –∏–∑ listEvents...`);
      
      // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π (—É–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ)
      const updatedListEvents = community.listEvents.filter(id => id !== deletedEventId);
      
      // –°–æ–∑–¥–∞–µ–º payload —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const updatePayload = {
        id: community.id,
        name: community.name,
        description: community.description,
        imageUrls: community.imageUrls,
        numberMembers: community.numberMembers,
        type: community.type,
        createdAt: community.createdAt,
        rating: community.rating,
        reviewsCount: community.reviewsCount,
        content: community.content,
        city: community.city,
        eventsCount: updatedListEvents.length, // –í–ê–ñ–ù–û: –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        postsCount: community.postsCount,
        users: community.users,
        author: community.author,
        listEvents: updatedListEvents // –í–ê–ñ–ù–û: —É–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', {
        removedEvent: deletedEventId,
        oldEventsCount: community.eventsCount,
        newEventsCount: updatedListEvents.length,
        oldListEvents: community.listEvents,
        newListEvents: updatedListEvents
      });

      const response = await fetch('http://localhost:8090/api/community/update', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify(updatePayload)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', response.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: ${response.status}`);
      }

      const updatedCommunity = await response.json();
      console.log(' –°–æ–æ–±—â–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', updatedCommunity);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      onCommunityUpdate?.(updatedCommunity);
      
      onMessage(`–°–æ–±—ã—Ç–∏–µ "${eventTitle}" —É–¥–∞–ª–µ–Ω–æ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
      
      return true;

    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π:', error);
      onMessage('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ, –Ω–æ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω');
      return false;
    }
  };

  /**
   * –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * –°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ listEvents —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –Ω–æ –ø–æ–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
   */
  // const handleArchiveEvent = async (eventId: string) => {
  //   const event = events.find(e => e.id === eventId);
  //   if (!event) return;

  //   const confirmed = window.confirm(`–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ "${event.title}"?\n\n–°–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.`);
  //   if (!confirmed) return;

  //   setDeletingEventId(eventId);

  //   try {
  //     const token = localStorage.getItem('accessToken');

  //     console.log(`üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ ${eventId}...`);

  //     // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  //     const eventResponse = await fetch(`http://localhost:8090/api/events/${eventId}`, {
  //       headers: {
  //         Authorization: `Bearer ${token}`
  //       }
  //     });

  //     if (!eventResponse.ok) {
  //       throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: ${eventResponse.status}`);
  //     }

  //     const fullEventData = await eventResponse.json();
  //     console.log('üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', fullEventData);

  //     // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
  //     const updatePayload = {
  //       ...fullEventData,
  //       archived: true // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
  //     };

  //     console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', updatePayload);

  //     const archiveResponse = await fetch('http://localhost:8090/api/events/update', {
  //       method: 'PUT',
  //       headers: {
  //         'Content-Type': 'application/json',
  //         Authorization: `Bearer ${token}`
  //       },
  //       body: JSON.stringify(updatePayload)
  //     });

  //     if (!archiveResponse.ok) {
  //       const errorText = await archiveResponse.text();
  //       console.error('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è:', archiveResponse.status, errorText);
  //       throw new Error(`–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: ${archiveResponse.status}`);
  //     }

  //     const updatedEvent = await archiveResponse.json();
  //     console.log(' –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:', updatedEvent);

  //     // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  //     setEvents(prev => prev.map(e => 
  //       e.id === eventId 
  //         ? { ...e, status: 'cancelled' as const }
  //         : e
  //     ));

  //     onMessage(`–°–æ–±—ã—Ç–∏–µ "${event.title}" –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ`);

  //   } catch (error) {
  //     console.error('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
  //     onMessage(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
  //   } finally {
  //     setDeletingEventId(null);
  //   }
  // };

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  // const handleRestoreEvent = async (eventId: string) => {
  //   const event = events.find(e => e.id === eventId);
  //   if (!event) return;

  //   setDeletingEventId(eventId);

  //   try {
  //     const token = localStorage.getItem('accessToken');

  //     console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ ${eventId}...`);

  //     // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  //     const eventResponse = await fetch(`http://localhost:8090/api/events/${eventId}`, {
  //       headers: {
  //         Authorization: `Bearer ${token}`
  //       }
  //     });

  //     if (!eventResponse.ok) {
  //       throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ: ${eventResponse.status}`);
  //     }

  //     const fullEventData = await eventResponse.json();
  //     console.log('üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', fullEventData);

  //     // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
  //     const updatePayload = {
  //       ...fullEventData,
  //       archived: false // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
  //     };

  //     console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', updatePayload);

  //     const restoreResponse = await fetch('http://localhost:8090/api/events/update', {
  //       method: 'PUT',
  //       headers: {
  //         'Content-Type': 'application/json',
  //         Authorization: `Bearer ${token}`
  //       },
  //       body: JSON.stringify(updatePayload)
  //     });

  //     if (!restoreResponse.ok) {
  //       const errorText = await restoreResponse.text();
  //       console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', restoreResponse.status, errorText);
  //       throw new Error(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${restoreResponse.status}`);
  //     }

  //     const updatedEvent = await restoreResponse.json();
  //     console.log(' –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', updatedEvent);

  //     setEvents(prev => prev.map(e => 
  //       e.id === eventId 
  //         ? { ...e, status: 'active' as const }
  //         : e
  //     ));

  //     onMessage(`–°–æ–±—ã—Ç–∏–µ "${event.title}" –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);

  //   } catch (error) {
  //     console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
  //     onMessage(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
  //   } finally {
  //     setDeletingEventId(null);
  //   }
  // };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
  const filteredEvents = events.filter(event => {
    const matchesSearch = event.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         event.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = statusFilter === 'all' || event.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      });
    } catch {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞';
    }
  };

  const formatTime = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è';
    }
  };

  const handleCreateEvent = () => {
    navigate(`/events/create?communityId=${community.id}`);
  };

  const handleEditEvent = (eventId: string) => {
    navigate(`/events/${eventId}/edit`);
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <span className={`${styles.badge} ${styles.badgeMember}`}>–ê–∫—Ç–∏–≤–Ω–æ–µ</span>;
      case 'postponed':
        return <span className={`${styles.badge} ${styles.badgeNew}`}>–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ</span>;
      case 'cancelled':
        return <span className={`${styles.badge}`} style={{ backgroundColor: '#ffcccc', color: '#dc3545' }}>–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ</span>;
      default:
        return <span className={styles.badge}>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</span>;
    }
  };

  const currentUser = localStorage.getItem('username');
  const canManageEvents = currentUser === community.author;

  const activeEventsCount = events.filter(e => e.status === 'active').length;
  const postponedEventsCount = events.filter(e => e.status === 'postponed').length;
  const cancelledEventsCount = events.filter(e => e.status === 'cancelled').length;

  return (
    <div className={styles.profileSection}>
      <div className={styles.sectionTitle}>
        –°–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        {canManageEvents && (
          <button className={styles.button} onClick={handleCreateEvent}>
            + –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
          </button>
        )}
      </div>

      <div className={styles.filterGroup}>
        <div 
          className={`${styles.filterOption} ${statusFilter === 'all' ? styles.filterOptionActive : ''}`}
          onClick={() => setStatusFilter('all')}
        >
          –í—Å–µ ({events.length})
        </div>
        <div 
          className={`${styles.filterOption} ${statusFilter === 'active' ? styles.filterOptionActive : ''}`}
          onClick={() => setStatusFilter('active')}
        >
          –ê–∫—Ç–∏–≤–Ω—ã–µ ({activeEventsCount})
        </div>
        <div 
          className={`${styles.filterOption} ${statusFilter === 'postponed' ? styles.filterOptionActive : ''}`}
          onClick={() => setStatusFilter('postponed')}
        >
          –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ ({postponedEventsCount})
        </div>
        <div 
          className={`${styles.filterOption} ${statusFilter === 'cancelled' ? styles.filterOptionActive : ''}`}
          onClick={() => setStatusFilter('cancelled')}
        >
          –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ({cancelledEventsCount})
        </div>
      </div>
      
      <div className={styles.searchBar}>
        <input 
          type="text" 
          placeholder="–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π..." 
          className={styles.input}
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <div className={styles.searchIcon}>
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </div>
      </div>

      {loading && (
        <div className={styles.loading}>
          <div className={styles.spinner}></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...</p>
        </div>
      )}

      {!loading && filteredEvents.length === 0 && (
        <div className={styles.noData}>
          {searchQuery ? '–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–£ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π'}
          {!searchQuery && canManageEvents && (
            <button 
              className={styles.button} 
              onClick={handleCreateEvent}
              style={{ marginTop: '15px' }}
            >
              –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            </button>
          )}
        </div>
      )}

      {!loading && filteredEvents.length > 0 && (
        <div className={styles.userList}>
          {filteredEvents.map(event => {
            const canEditEvent = currentUser === event.author || currentUser === community.author;
            const isDeleting = deletingEventId === event.id;

            return (
              <div key={event.id} className={styles.card}>
                <div className={styles.cardContent}>
                  <div className={styles.eventDate}>
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                      <line x1="16" y1="2" x2="16" y2="6"></line>
                      <line x1="8" y1="2" x2="8" y2="6"></line>
                      <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                    {formatDate(event.dateTime)} –≤ {formatTime(event.dateTime)}
                  </div>

                  <div className={styles.eventTitle}>
                    {event.title}
                    {event.eventType === 'EMERGENCY' && (
                      <span style={{ marginLeft: '8px', fontSize: '12px', color: '#ff4444' }}>
                         –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ
                      </span>
                    )}
                  </div>

                  <div className={styles.eventDescription}>
                    {event.description}
                  </div>

                  <div className={styles.eventDetails}>
                    <div className={styles.eventDetail}>
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                        <circle cx="12" cy="7" r="4"></circle>
                      </svg>
                      {event.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    </div>

                    <div className={styles.eventDetail}>
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                        <circle cx="12" cy="10" r="3"></circle>
                      </svg>
                      {event.city}
                    </div>

                    <div className={styles.eventDetail}>
                      {getStatusBadge(event.status)}
                    </div>
                  </div>
                </div>

                {canEditEvent && (
                  <div className={styles.cardActions}>
                    <button 
                      className={styles.button}
                      onClick={() => handleEditEvent(event.id)}
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"
                      disabled={isDeleting}
                    >
                      ‚úèÔ∏è
                    </button>
                    
                    {/* –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ */}
                    {/* {event.status === 'cancelled' ? (
                      <button 
                        className={`${styles.button} ${styles.buttonSecondary}`}
                        onClick={() => handleRestoreEvent(event.id)}
                        title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
                        disabled={isDeleting}
                      >
                        {isDeleting ? '‚è≥' : 'üîÑ'}
                      </button>
                    ) : (
                      <button 
                        className={`${styles.button}`}
                        onClick={() => handleArchiveEvent(event.id)}
                        title="–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"
                        disabled={isDeleting}
                        style={{ backgroundColor: '#ffa000', color: 'white' }}
                      >
                        {isDeleting ? '‚è≥' : 'üì¶'}
                      </button>
                    )} */}
                    
                    <button 
                      className={`${styles.button} ${styles.buttonDanger}`}
                      onClick={() => handleDeleteEvent(event.id)}
                      title="–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
                      disabled={isDeleting}
                    >
                      {isDeleting ? '‚è≥' : '‚ùå'}
                    </button>
                  </div>
                )}
                       
              
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};

export default EventsTab;