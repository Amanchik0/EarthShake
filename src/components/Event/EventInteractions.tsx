import React, { useState, useEffect } from 'react';
import { BackendEventData } from '../../types/event';
import { useAuth } from '../../components/auth/AuthContext';

interface EventInteractionsProps {
  event: BackendEventData;
  styles: any;
  onEventUpdate: (updatedEvent: BackendEventData) => void;
}

const EventInteractions: React.FC<EventInteractionsProps> = ({ event, styles, onEventUpdate }) => {
  const { user } = useAuth();
  const [commentText, setCommentText] = useState('');
  const [userRating, setUserRating] = useState(0);
  const [isSubmittingComment, setIsSubmittingComment] = useState(false);
  const [isSubmittingRating, setIsSubmittingRating] = useState(false);
  const [isJoiningEvent, setIsJoiningEvent] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ–±—ã—Ç–∏–∏
  const isParticipant = user ? event.usersIds.includes(user.username) : false;

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏
  const getScores = () => {
    if (!event.score) return [];
    if (Array.isArray(event.score)) return event.score;
    return [];
  };

  const getUserScore = () => {
    if (!user) return 0;
    const scores = getScores();
    const userScore = scores.find(score => {
      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {username: rating} –∏–ª–∏ {username: "name", rating: number}
      return score.username === user.username || score[user.username] !== undefined;
    });
    
    if (userScore) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ rating, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ username
      return userScore.rating || userScore[user.username] || 0;
    }
    return 0;
  };

  const getAverageScore = () => {
    const scores = getScores();
    if (scores.length === 0) return 0;
    
    const total = scores.reduce((sum, score) => {
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
      const rating = score.rating || Object.values(score).find(val => typeof val === 'number') || 0;
      return sum + rating;
    }, 0);
    
    return total / scores.length;
  };

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const currentUserScore = getUserScore();
    setUserRating(currentUserScore);
  }, [event.score, user]);

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–≤—É–º—è API –≤—ã–∑–æ–≤–∞–º–∏
const handleToggleParticipation = async () => {
  if (!user) {
    console.log('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É—á–∞—Å—Ç–∏—è');
    return;
  }

  setIsJoiningEvent(true);
  
  try {
    const token = localStorage.getItem('accessToken');
    const shouldJoin = !isParticipant;
    const actionText = shouldJoin ? '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫' : '–≤—ã—Ö–æ–¥–∞ –∏–∑';
    
    console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å ${actionText} —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, user.username);

    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const userResponse = await fetch(
      `http://localhost:8090/api/users/get-by-username/${user.username}`,
      {
        headers: {
          ...(token && { Authorization: `Bearer ${token}` })
        }
      }
    );

    if (!userResponse.ok) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userResponse.status}`);
    }

    const userData = await userResponse.json();
    const userId = userData.id;
    console.log(' –ü–æ–ª—É—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    // –®–∞–≥ 2: PATCH –∑–∞–ø—Ä–æ—Å - –¥–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`üìù –®–∞–≥ 1: ${actionText} —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...`);
    const patchResponse = await fetch(
      `http://localhost:8090/api/users/add-or-delete-event/${event.id}/${userId}/${shouldJoin}`,
      {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          ...(token && { Authorization: `Bearer ${token}` })
        }
      }
    );

    const patchResponseText = await patchResponse.text();
    console.log(`üì• PATCH –æ—Ç–≤–µ—Ç (${actionText} –≤ –ø—Ä–æ—Ñ–∏–ª–µ):`, patchResponse.status, patchResponseText);

    if (!patchResponse.ok) {
      throw new Error(`PATCH –æ—à–∏–±–∫–∞ ${patchResponse.status}: ${patchResponseText}`);
    }

    // –®–∞–≥ 3: PUT –∑–∞–ø—Ä–æ—Å - –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è
    console.log(`üìù –®–∞–≥ 2: –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è...`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    let updatedUsersIds;
    if (shouldJoin) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
      updatedUsersIds = event.usersIds.includes(user.username) 
        ? event.usersIds 
        : [...event.usersIds, user.username];
    } else {
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
      updatedUsersIds = event.usersIds.filter(id => id !== user.username);
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updatedEventData = {
      id: event.id,
      eventType: event.eventType,
      title: event.title,
      description: event.description,
      content: event.content,
      author: event.author,
      city: event.city,
      location: {
        x: event.location.x,
        y: event.location.y
      },
      mediaUrl: Array.isArray(event.mediaUrl) ? event.mediaUrl : [event.mediaUrl].filter(Boolean),
      score: Array.isArray(event.score) ? event.score : [],
      dateTime: event.dateTime,
      eventStatus: event.eventStatus,
      tags: [...event.tags],
      usersIds: updatedUsersIds, // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      metadata: {
        address: event.metadata?.address || '',
        scheduledDate: event.metadata?.scheduledDate || event.dateTime,
        createdAt: event.metadata?.createdAt || new Date().toISOString(),
        isCommunity: event.metadata?.isCommunity || 'true'
      },
      comments: [...event.comments],
      archived: event.archived || false
    };

    // –î–æ–±–∞–≤–ª—è–µ–º emergencyType –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ
    if (event.eventType === 'EMERGENCY' && event.emergencyType) {
      (updatedEventData as any).emergencyType = event.emergencyType;
    }

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:', {
      eventId: event.id,
      oldParticipants: event.usersIds,
      newParticipants: updatedUsersIds,
      action: shouldJoin ? '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ' : '—É–¥–∞–ª–µ–Ω–∏–µ',
      user: user.username
    });

    const putResponse = await fetch('http://localhost:8090/api/events/update', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        ...(token && { Authorization: `Bearer ${token}` })
      },
      body: JSON.stringify(updatedEventData)
    });

    const putResponseText = await putResponse.text();
    console.log('üì• PUT –æ—Ç–≤–µ—Ç (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è):', putResponse.status, putResponseText);

    if (!putResponse.ok) {
      console.error('–û—à–∏–±–∫–∞ PUT –∑–∞–ø—Ä–æ—Å–∞:', putResponse.status, putResponseText);
      throw new Error(`PUT –æ—à–∏–±–∫–∞ ${putResponse.status}: ${putResponseText}`);
    }

    // –®–∞–≥ 4: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let result;
    try {
      result = putResponseText ? JSON.parse(putResponseText) : updatedEventData;
    } catch (e) {
      console.warn(' –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç PUT –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      result = updatedEventData;
    }

    console.log(' –û–±–∞ API –≤—ã–∑–æ–≤–∞ —É—Å–ø–µ—à–Ω—ã! –û–±–Ω–æ–≤–ª—è–µ–º UI...', {
      previousParticipants: event.usersIds.length,
      newParticipants: result.usersIds.length,
      action: shouldJoin ? '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ' : '–≤—ã—Ö–æ–¥',
      user: user.username
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    onEventUpdate(result);

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è:', error);
    alert(`–ù–µ —É–¥–∞–ª–æ—Å—å ${!isParticipant ? '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫' : '–ø–æ–∫–∏–Ω—É—Ç—å'} —Å–æ–±—ã—Ç–∏–µ: ${error.message}`);
  } finally {
    setIsJoiningEvent(false);
  }
};

// –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é updateEvent –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const updateEvent = async (updates: Partial<BackendEventData>) => {
  try {
    const token = localStorage.getItem('accessToken');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updatedEventData = {
      id: event.id,
      eventType: event.eventType,
      title: event.title,
      description: event.description,
      content: event.content,
      author: event.author,
      city: event.city,
      location: {
        x: event.location.x,
        y: event.location.y
      },
      mediaUrl: Array.isArray(event.mediaUrl) ? event.mediaUrl : [event.mediaUrl].filter(Boolean),
      score: Array.isArray(event.score) ? event.score : [],
      dateTime: event.dateTime,
      eventStatus: event.eventStatus,
      tags: [...event.tags],
      usersIds: [...event.usersIds],
      metadata: {
        address: event.metadata?.address || '',
        scheduledDate: event.metadata?.scheduledDate || event.dateTime,
        createdAt: event.metadata?.createdAt || new Date().toISOString(),
        isCommunity: event.metadata?.isCommunity || 'true'
      },
      comments: [...event.comments],
      archived: event.archived || false,
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      ...updates
    };

    // –î–æ–±–∞–≤–ª—è–µ–º emergencyType –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ
    if (event.eventType === 'EMERGENCY' && event.emergencyType) {
      (updatedEventData as any).emergencyType = event.emergencyType;
    }

    console.log('üöÄ PUT –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', JSON.stringify(updatedEventData, null, 2));

    const response = await fetch('http://localhost:8090/api/events/update', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        ...(token && { Authorization: `Bearer ${token}` })
      },
      body: JSON.stringify(updatedEventData)
    });

    const responseText = await response.text();
    console.log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ):', response.status, responseText);

    if (!response.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', response.status, responseText);
      throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
    }

    let result;
    try {
      result = responseText ? JSON.parse(responseText) : updatedEventData;
    } catch (e) {
      console.warn(' –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      result = updatedEventData;
    }

    console.log(' –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', result);
    onEventUpdate(result);
    return result;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    throw error;
  }
};

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleAddComment = async () => {
    if (!user || !commentText.trim()) {
      console.log('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
      return;
    }

    setIsSubmittingComment(true);
    try {
      const newComment = {
        id: `comment_${Date.now()}_${user.username}`,
        author: user.username,
        text: commentText.trim(),
        date: new Date().toISOString(),
        avatarUrl: ''
      };

      console.log('üí¨ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', newComment);

      const updatedComments = [...event.comments, newComment];

      await updateEvent({ comments: updatedComments });
      setCommentText('');
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
    } finally {
      setIsSubmittingComment(false);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
  const handleRateEvent = async (rating: number) => {
    if (!user) {
      console.log('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏');
      return;
    }

    console.log('‚≠ê –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ:', rating, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.username);
    setIsSubmittingRating(true);
    try {
      const scores = getScores();
      console.log(' –¢–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏:', scores);
      
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingScoreIndex = scores.findIndex(score => {
        return score.username === user.username || score[user.username] !== undefined;
      });
      
      let updatedScores;
      if (existingScoreIndex !== -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        updatedScores = [...scores];
        updatedScores[existingScoreIndex] = { [user.username]: rating };
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        updatedScores = [...scores, { [user.username]: rating }];
      }

      console.log(' –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:', updatedScores);

      await updateEvent({ score: updatedScores });
      setUserRating(rating);
      console.log(' –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ');
    } finally {
      setIsSubmittingRating(false);
    }
  };

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–æ–±—ã—Ç–∏—é / –ø–æ–∫–∏–Ω—É—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PATCH API


  // –†–µ–Ω–¥–µ—Ä –∑–≤–µ–∑–¥ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
  const renderRatingStars = () => {
    const stars = [];
    
    for (let i = 1; i <= 5; i++) {
      stars.push(
        <button
          key={i}
          onClick={() => handleRateEvent(i)}
          disabled={isSubmittingRating}
          style={{
            background: 'none',
            border: 'none',
            fontSize: '1.5rem',
            cursor: isSubmittingRating ? 'not-allowed' : 'pointer',
            color: i <= userRating ? 'gold' : 'var(--light-gray)',
            transition: 'color 0.2s',
            padding: '2px'
          }}
          onMouseEnter={(e) => {
            if (!isSubmittingRating) {
              e.currentTarget.style.color = 'gold';
            }
          }}
          onMouseLeave={(e) => {
            if (!isSubmittingRating) {
              e.currentTarget.style.color = i <= userRating ? 'gold' : 'var(--light-gray)';
            }
          }}
        >
          ‚òÖ
        </button>
      );
    }
    return stars;
  };

  if (!user) {
    return (
      <div className={styles.interactionsSection}>
        <div style={{ textAlign: 'center', padding: '2rem', color: 'var(--dark-gray)' }}>
          <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Å–æ–±—ã—Ç–∏–µ–º</p>
        </div>
      </div>
    );
  }

  const averageScore = getAverageScore();
  const scoresCount = getScores().length;

  return (
    <div className={styles.interactionsSection}>
      {/* –£—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏ */}
      <div className={styles.participationSection}>
        <button
          onClick={handleToggleParticipation}
          disabled={isJoiningEvent}
          className={`${styles.participationButton} ${isParticipant ? styles.leaveButton : styles.joinButton}`}
        >
          {isJoiningEvent ? '...' : isParticipant ? '–ü–æ–∫–∏–Ω—É—Ç—å —Å–æ–±—ã—Ç–∏–µ' : ' –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏–∏'}
        </button>
        <span className={styles.participantsCount}>
          {event.usersIds.length} —É—á–∞—Å—Ç–Ω–∏–∫{event.usersIds.length === 1 ? '' : event.usersIds.length < 5 ? '–∞' : '–æ–≤'}
        </span>
      </div>

      {/* –û—Ü–µ–Ω–∫–∞ —Å–æ–±—ã—Ç–∏—è */}
      <div className={styles.ratingSection}>
        <h3 className={styles.sectionTitle}>–û—Ü–µ–Ω–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:</h3>
        <div className={styles.ratingStars}>
          {renderRatingStars()}
          <span className={styles.ratingText}>
            –°—Ä–µ–¥–Ω—è—è: {averageScore > 0 ? averageScore.toFixed(1) : '0.0'} ({scoresCount} –æ—Ü–µ–Ω–æ–∫)
          </span>
        </div>
        {userRating > 0 && (
          <p style={{ fontSize: '0.8rem', color: 'var(--primary-pink)', marginTop: '5px' }}>
            –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {userRating} ‚òÖ
          </p>
        )}
        {isSubmittingRating && <p style={{ fontSize: '0.8rem', color: 'var(--dark-gray)' }}>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏...</p>}
      </div>

      {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
      <div className={styles.addCommentSection}>
        <h3 className={styles.sectionTitle}>–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</h3>
        <div className={styles.commentForm}>
          <textarea
            value={commentText}
            onChange={(e) => setCommentText(e.target.value)}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
            className={styles.commentTextarea}
            rows={3}
            maxLength={500}
          />
          <div className={styles.commentActions}>
            <span className={styles.charCount}>
              {commentText.length}/500
            </span>
            <button
              onClick={handleAddComment}
              disabled={isSubmittingComment || !commentText.trim()}
              className={styles.submitCommentButton}
            >
              {isSubmittingComment ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EventInteractions;