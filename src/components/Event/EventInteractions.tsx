import React, { useState } from 'react';
import { BackendEventData } from '../../types/event';
import { useAuth } from '../auth/AuthContext';

interface EventInteractionsProps {
  event: BackendEventData;
  styles: any;
  onEventUpdate: (updatedEvent: BackendEventData) => void;
}

const EventInteractions: React.FC<EventInteractionsProps> = ({ event, styles, onEventUpdate }) => {
  const { user } = useAuth();
  const [isJoining, setIsJoining] = useState(false);
  const [isRating, setIsRating] = useState(false);
  const [selectedRating, setSelectedRating] = useState(0);
  const [showRatingModal, setShowRatingModal] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ–±—ã—Ç–∏–∏
  const isParticipating = user ? event.usersIds.includes(user.username) : false;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
  const calculateAverageRating = (): number => {
    if (!event.score || !Array.isArray(event.score) || event.score.length === 0) {
      return 0;
    }
    const sum = event.score.reduce((acc, score) => acc + score, 0);
    return sum / event.score.length;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞
  const renderRatingStars = (rating: number, interactive: boolean = false, onStarClick?: (star: number) => void) => {
    const stars = [];
    for (let i = 1; i <= 5; i++) {
      stars.push(
        <span
          key={i}
          className={`${styles.star} ${interactive ? styles.interactiveStar : ''}`}
          style={{ 
            color: i <= rating ? '#FFD700' : '#E0E0E0',
            cursor: interactive ? 'pointer' : 'default'
          }}
          onClick={() => interactive && onStarClick && onStarClick(i)}
        >
          ‚òÖ
        </span>
      );
    }
    return stars;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—á–∞—Å—Ç–∏—è/–æ—Ç–º–µ–Ω—ã —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏
  const handleJoinToggle = async () => {
    if (!user) {
      alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏');
      return;
    }

    setIsJoining(true);

    try {
      const token = localStorage.getItem('accessToken');
      const action = isParticipating ? 'leave' : 'join';
      
      const response = await fetch(`http://localhost:8090/api/events/${event.id}/${action}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ
        const updatedUsersIds = isParticipating 
          ? event.usersIds.filter(id => id !== user.username)
          : [...event.usersIds, user.username];

        const updatedEvent: BackendEventData = {
          ...event,
          usersIds: updatedUsersIds
        };

        onEventUpdate(updatedEvent);
        console.log(`${action === 'join' ? '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å' : '–ü–æ–∫–∏–Ω—É–ª–∏'} —Å–æ–±—ã—Ç–∏–µ`);
      } else {
        const errorText = await response.text();
        console.error(`–û—à–∏–±–∫–∞ ${action}:`, errorText);
        alert(`–ù–µ —É–¥–∞–ª–æ—Å—å ${action === 'join' ? '–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫' : '–ø–æ–∫–∏–Ω—É—Ç—å'} —Å–æ–±—ã—Ç–∏–µ`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setIsJoining(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
  const handleRatingSubmit = async () => {
    if (!user || selectedRating === 0) {
      return;
    }

    setIsRating(true);

    try {
      const token = localStorage.getItem('accessToken');
      
      const response = await fetch(`http://localhost:8090/api/events/${event.id}/rate`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          rating: selectedRating / 5 // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑ 1-5 –≤ 0-1 –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
        })
      });

      if (response.ok) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ª–æ–∫–∞–ª—å–Ω–æ
        const normalizedRating = selectedRating / 5;
        const updatedScores = event.score || [];
        const newScores = [...updatedScores, normalizedRating];

        const updatedEvent: BackendEventData = {
          ...event,
          score: newScores
        };

        onEventUpdate(updatedEvent);
        setShowRatingModal(false);
        setSelectedRating(0);
        console.log('–†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      } else {
        const errorText = await response.text();
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', errorText);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setIsRating(false);
    }
  };

  const averageRating = calculateAverageRating();
  const displayRating = averageRating * 5; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —à–∫–∞–ª–µ 1-5

  return (
    <section className={styles.eventInteractions}>
      <div className={styles.interactionButtons}>
        {/* –ö–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è */}
        <button
          className={`${styles.interactionBtn} ${isParticipating ? styles.participating : styles.joinBtn}`}
          onClick={handleJoinToggle}
          disabled={isJoining}
        >
          {isJoining ? (
            '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...'
          ) : isParticipating ? (
            '‚úÖ –£—á–∞—Å—Ç–≤—É—é'
          ) : (
            'üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'
          )}
        </button>

        {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ */}
        <button
          className={`${styles.interactionBtn} ${styles.rateBtn}`}
          onClick={() => setShowRatingModal(true)}
          disabled={!user}
        >
          ‚≠ê –û—Ü–µ–Ω–∏—Ç—å
        </button>

        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è */}
        <button
          className={`${styles.interactionBtn} ${styles.shareBtn}`}
          onClick={() => {
            if (navigator.share) {
              navigator.share({
                title: event.title,
                text: event.description,
                url: window.location.href
              });
            } else {
              navigator.clipboard.writeText(window.location.href);
              alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            }
          }}
        >
          üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
        </button>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Ç–∏–Ω–≥–µ */}
      <div className={styles.ratingInfo}>
        <div className={styles.currentRating}>
          <span className={styles.ratingLabel}>–†–µ–π—Ç–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è:</span>
          <div className={styles.ratingStars}>
            {renderRatingStars(displayRating)}
            <span className={styles.ratingValue}>
              ({displayRating.toFixed(1)} –∏–∑ 5, {(event.score || []).length} –æ—Ü–µ–Ω–æ–∫)
            </span>
          </div>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö */}
      <div className={styles.participantsInfo}>
        <span className={styles.participantsCount}>
          üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <strong>{event.usersIds.length}</strong>
        </span>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ */}
      {showRatingModal && (
        <div className={styles.modalOverlay} onClick={() => setShowRatingModal(false)}>
          <div className={styles.ratingModal} onClick={(e) => e.stopPropagation()}>
            <h3>–û—Ü–µ–Ω–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ</h3>
            <div className={styles.ratingInput}>
              {renderRatingStars(selectedRating, true, setSelectedRating)}
            </div>
            <div className={styles.modalButtons}>
              <button
                className={`${styles.modalBtn} ${styles.cancelBtn}`}
                onClick={() => {
                  setShowRatingModal(false);
                  setSelectedRating(0);
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                className={`${styles.modalBtn} ${styles.submitBtn}`}
                onClick={handleRatingSubmit}
                disabled={selectedRating === 0 || isRating}
              >
                {isRating ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ü–µ–Ω–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}
    </section>
  );
};

export default EventInteractions;