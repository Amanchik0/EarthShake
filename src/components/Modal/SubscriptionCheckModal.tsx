import React, { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../components/auth/AuthContext';
import styles from './SubscriptionCheckModal.module.css';

interface SubscriptionCheckModalProps {
  isOpen: boolean;
  onClose: () => void;
  feature: 'event' | 'community';
  targetPath: string;
}

const SubscriptionCheckModal: React.FC<SubscriptionCheckModalProps> = ({ 
  isOpen, 
  onClose,
  feature,
  targetPath
}) => {
  const navigate = useNavigate();
  const { updateUser } = useAuth();
  const [isSubscribing, setIsSubscribing] = useState(false);
  const [modalRoot, setModalRoot] = useState<HTMLElement | null>(null);

  useEffect(() => {
    let modalRootElement = document.getElementById('modal-root');
    if (!modalRootElement) {
      modalRootElement = document.createElement('div');
      modalRootElement.id = 'modal-root';
      document.body.appendChild(modalRootElement);
    }
    setModalRoot(modalRootElement);
  }, []);

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }

    return () => {
      document.body.style.overflow = '';
    };
  }, [isOpen]);

  const handleOverlayClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  const updateSubscription = async () => {
    const token = localStorage.getItem('accessToken');
    const username = localStorage.getItem('username');
    
    if (!token || !username) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
    const profileResponse = await fetch(
      `http://localhost:8090/api/users/get-by-username/${username}`,
      { 
        headers: { 
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        } 
      }
    );
    
    if (!profileResponse.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
    
    const actualProfile = await profileResponse.json();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const subscriptionData = {
      id: actualProfile.id,
      username: actualProfile.username,
      email: actualProfile.email,
      password: actualProfile.password,
      firstName: actualProfile.firstName,
      lastName: actualProfile.lastName,
      role: actualProfile.role,
      city: actualProfile.city,
      imageUrl: actualProfile.imageUrl,
      phoneNumber: actualProfile.phoneNumber,
      registrationDate: actualProfile.registrationDate,
      communityId: actualProfile.communityId || [],
      eventIds: actualProfile.eventIds || [],
      metadata: {
        ...actualProfile.metadata,
        subscriptionUpdatedAt: new Date().toISOString()
      },
      isSubscriber: true
    };

    const response = await fetch('http://localhost:8090/api/users/update', {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(subscriptionData)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
    }

    return await response.json();
  };

  const handleSubscribeAndProceed = async () => {
    setIsSubscribing(true);
    try {
      console.log('üîÑ –û—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏...');
      
      const updatedProfile = await updateSubscription();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º AuthContext
      updateUser({ isSubscriber: true });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
      localStorage.setItem('isSubscriber', 'true');
      
      console.log(' –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫:', targetPath);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notification = document.createElement('div');
      notification.textContent = '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Premium!';
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #10b981;
        color: white;
        padding: 12px 24px;
        border-radius: 8px;
        z-index: 1002;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        font-weight: 600;
      `;
      document.body.appendChild(notification);
      
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 3000);

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      onClose();
      navigate(targetPath);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      
      const errorNotification = document.createElement('div');
      errorNotification.textContent = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏';
      errorNotification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #ef4444;
        color: white;
        padding: 12px 24px;
        border-radius: 8px;
        z-index: 1002;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        font-weight: 600;
      `;
      document.body.appendChild(errorNotification);
      
      setTimeout(() => {
        if (document.body.contains(errorNotification)) {
          document.body.removeChild(errorNotification);
        }
      }, 3000);
    } finally {
      setIsSubscribing(false);
    }
  };

  const handleGoToProfile = () => {
    onClose();
    navigate('/profile');
  };

  if (!modalRoot || !isOpen) return null;

  const featureNames = {
    event: '—Å–æ–±—ã—Ç–∏–π',
    community: '—Å–æ–æ–±—â–µ—Å—Ç–≤'
  };

  const modalContent = (
    <div className={styles.modalOverlay} onClick={handleOverlayClick}>
      <div className={styles.modal}>
        <div className={styles.modalHeader}>
          <button 
            className={styles.closeBtn}
            onClick={onClose}
            disabled={isSubscribing}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ"
          >
            √ó
          </button>
          <div className={styles.premiumIcon}></div>
          <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è Premium –ø–æ–¥–ø–∏—Å–∫–∞</h2>
          <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è {featureNames[feature]} –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞</p>
        </div>
        
        <div className={styles.modalBody}>
          <div className={styles.subscriptionPrice}>
            <span className={styles.price}>5000</span>
            <span className={styles.currency}>—Ç–µ–Ω–≥–µ/–º–µ—Å—è—Ü</span>
          </div>
          
          <div className={styles.benefits}>
            <div className={styles.benefitItem}>
              <span className={styles.checkIcon}>‚úì</span>
              <span>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π</span>
            </div>
            <div className={styles.benefitItem}>
              <span className={styles.checkIcon}>‚úì</span>
              <span>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤</span>
            </div>
            <div className={styles.benefitItem}>
              <span className={styles.checkIcon}>‚úì</span>
              <span>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã</span>
            </div>
            <div className={styles.benefitItem}>
              <span className={styles.checkIcon}>‚úì</span>
              <span>VIP –∑–Ω–∞—á–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ</span>
              <span className={styles.badgeHighlight}></span>
            </div>
          </div>

          <div className={styles.featureHighlight}>
            <div className={styles.highlightIcon}>
              {feature === 'event' ? 'üìÖ' : 'üë•'}
            </div>
            <div className={styles.highlightText}>
              –ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã —Å—Ä–∞–∑—É —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å {feature === 'event' ? '—Å–æ–±—ã—Ç–∏–µ' : '—Å–æ–æ–±—â–µ—Å—Ç–≤–æ'}!
            </div>
          </div>
        </div>
        
        <div className={styles.modalFooter}>
          <button 
            className={styles.subscribeBtn}
            onClick={handleSubscribeAndProceed}
            disabled={isSubscribing}
          >
            {isSubscribing ? (
              <span className={styles.loaderContainer}>
                <svg className={styles.spinner} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className={styles.spinnerTrack} cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className={styles.spinnerPath} fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                –û—Ñ–æ—Ä–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...
              </span>
            ) : '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}
          </button>
          
          <button 
            className={styles.profileBtn}
            onClick={handleGoToProfile}
            disabled={isSubscribing}
          >
            –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ
          </button>
          
          <p className={styles.subscriptionNote}>
            –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
          </p>
        </div>
      </div>
    </div>
  );

  return createPortal(modalContent, modalRoot);
};

export default SubscriptionCheckModal;