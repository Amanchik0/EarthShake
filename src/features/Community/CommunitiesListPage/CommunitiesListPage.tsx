import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../../components/auth/AuthContext';
import FilterDropdown from '../../../components/EventList/FilterDropdown';
import CommunityCard from '../../../components/Community/CommunityCard';
import styles from './CommunitiesListPage.module.css';
import { Community, CommunityDetails, toCommunityDetails } from '../../../types/community';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
interface CommunityPageResponse {
  content: Community[];
  pageable: {
    pageNumber: number;
    pageSize: number;
    sort: {
      empty: boolean;
      sorted: boolean;
      unsorted: boolean;
    };
    offset: number;
    paged: boolean;
    unpaged: boolean;
  };
  totalPages: number;
  totalElements: number;
  last: boolean;
  size: number;
  number: number;
  sort: {
    empty: boolean;
    sorted: boolean;
    unsorted: boolean;
  };
  numberOfElements: number;
  first: boolean;
  empty: boolean;
}

export interface FilterConfig {
  readonly label: string;
  readonly options: FilterOption[];
}

export interface FilterOption {
  readonly value: string;
  readonly label: string;
}

const CommunitiesListPage: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
  const [communities, setCommunities] = useState<CommunityDetails[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞
  const [filters, setFilters] = useState<Record<string, string>>({
    category: '',
    location: '',
    size: '',
    membership: '',
  });
  const [search, setSearch] = useState('');
  const [selectedCity, setSelectedCity] = useState('');
  const [sortBy, setSortBy] = useState<'name' | 'members' | 'rating' | 'created'>('name');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');

  const filterConfigs: FilterConfig[] = [
    {
      label: 'category',
      options: [
        { value: '', label: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
        { value: 'active', label: '–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö' },
        { value: 'education', label: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' },
        { value: 'creative', label: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ' },
        { value: 'tech', label: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
        { value: 'entertainment', label: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è' },
        { value: 'sports', label: '–°–ø–æ—Ä—Ç' },
        { value: 'business', label: '–ë–∏–∑–Ω–µ—Å' },
        { value: 'science', label: '–ù–∞—É–∫–∞' },
        { value: 'health', label: '–ó–¥–æ—Ä–æ–≤—å–µ' },
        { value: 'art', label: '–ò—Å–∫—É—Å—Å—Ç–≤–æ' },
      ],
    },
    {
      label: 'location',
      options: [
        { value: '', label: '–í—Å–µ –≥–æ—Ä–æ–¥–∞' },
        { value: '–ê–ª–º–∞—Ç—ã', label: '–ê–ª–º–∞—Ç—ã' },
        { value: '–ê—Å—Ç–∞–Ω–∞', label: '–ê—Å—Ç–∞–Ω–∞' },
        { value: '–®—ã–º–∫–µ–Ω—Ç', label: '–®—ã–º–∫–µ–Ω—Ç' },
        { value: '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞', label: '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞' },
        { value: '–ê–∫—Ç–æ–±–µ', label: '–ê–∫—Ç–æ–±–µ' },
        { value: '–¢–∞—Ä–∞–∑', label: '–¢–∞—Ä–∞–∑' },
        { value: '–ü–∞–≤–ª–æ–¥–∞—Ä', label: '–ü–∞–≤–ª–æ–¥–∞—Ä' },
        { value: '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫', label: '–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫' },
        { value: '–°–µ–º–µ–π', label: '–°–µ–º–µ–π' },
        { value: '–ê—Ç—ã—Ä–∞—É', label: '–ê—Ç—ã—Ä–∞—É' },
        { value: '–ö–æ—Å—Ç–∞–Ω–∞–π', label: '–ö–æ—Å—Ç–∞–Ω–∞–π' },
        { value: '–ö—ã–∑—ã–ª–æ—Ä–¥–∞', label: '–ö—ã–∑—ã–ª–æ—Ä–¥–∞' },
        { value: '–£—Ä–∞–ª—å—Å–∫', label: '–£—Ä–∞–ª—å—Å–∫' },
        { value: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫', label: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫' },
        { value: '–ê–∫—Ç–∞—É', label: '–ê–∫—Ç–∞—É' },
        { value: '–¢–µ–º–∏—Ä—Ç–∞—É', label: '–¢–µ–º–∏—Ä—Ç–∞—É' },
        { value: '–¢—É—Ä–∫–µ—Å—Ç–∞–Ω', label: '–¢—É—Ä–∫–µ—Å—Ç–∞–Ω' },
        { value: '–û–Ω–ª–∞–π–Ω', label: '–û–Ω–ª–∞–π–Ω' },
      ],
    },
    {
      label: 'size',
      options: [
        { value: '', label: '–õ—é–±–æ–π —Ä–∞–∑–º–µ—Ä' },
        { value: 'small', label: '–î–æ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' },
        { value: 'medium', label: '–û—Ç 100 –¥–æ 500' },
        { value: 'large', label: '–û—Ç 500 –¥–æ 1000' },
        { value: 'huge', label: '–ë–æ–ª–µ–µ 1000' },
      ],
    },
    {
      label: 'membership',
      options: [
        { value: '', label: '–í—Å–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' },
        { value: 'member', label: '–ú–æ–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' },
        { value: 'author', label: '–°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π' },
        { value: 'available', label: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è' },
      ],
    },
  ];

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤
  const loadCommunities = async () => {
    setLoading(true);
    setError(null);

    try {
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤...');
      
      const token = localStorage.getItem('accessToken');
      const response = await fetch('http://localhost:8090/api/community/get-all', {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤:', response.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
      }

      const data: CommunityPageResponse = await response.json();
      console.log('‚úÖ –û—Ç–≤–µ—Ç API —Å–æ–æ–±—â–µ—Å—Ç–≤:', data);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${data.totalElements} —Å–æ–æ–±—â–µ—Å—Ç–≤ –Ω–∞ ${data.totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö`);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤ –∏–∑ –ø–æ–ª—è content
      const communitiesArray: Community[] = data.content || [];
      console.log('üìã –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤:', communitiesArray);

      if (!Array.isArray(communitiesArray)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ CommunityDetails
      const communityDetails = communitiesArray.map(community => 
        toCommunityDetails(community, user?.username)
      );

      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${communityDetails.length} —Å–æ–æ–±—â–µ—Å—Ç–≤`);
      setCommunities(communityDetails);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤:', errorMessage);
      setError(errorMessage);
      setCommunities([]);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadCommunities();
  }, [user?.username]);

  const handleFilterChange = (filterName: string, value: string) => {
    setFilters(prev => ({
      ...prev,
      [filterName]: value,
    }));
  };

  const handleCitySelect = (cityName: string) => {
    setSelectedCity(cityName);
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
    if (cityName) {
      setFilters(prev => ({ ...prev, location: cityName }));
    }
  };

  const handleCreateCommunity = () => {
    navigate('/communities/create');
  };

  const handleSort = (field: 'name' | 'members' | 'rating' | 'created') => {
    if (sortBy === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(field);
      setSortOrder('asc');
    }
  };

  const clearError = () => {
    setError(null);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤
  const filteredAndSortedCommunities = communities
    .filter(community => {
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (filters.category && community.category !== filters.category) return false;
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏–∏
      if (filters.location && community.city !== filters.location) return false;
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
      if (filters.size) {
        const count = community.numberMembers;
        
        switch (filters.size) {
          case 'small':
            return count < 100;
          case 'medium':
            return count >= 100 && count < 500;
          case 'large':
            return count >= 500 && count < 1000;
          case 'huge':
            return count >= 1000;
          default:
            return true;
        }
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–∏—é
      if (filters.membership) {
        switch (filters.membership) {
          case 'member':
            return community.isMember;
          case 'author':
            return community.isAuthor;
          case 'available':
            return !community.isMember;
          default:
            return true;
        }
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
      if (search) {
        const searchLower = search.toLowerCase();
        return community.name.toLowerCase().includes(searchLower) ||
               community.description.toLowerCase().includes(searchLower) ||
               community.city.toLowerCase().includes(searchLower);
      }
      
      return true;
    })
    .sort((a, b) => {
      let comparison = 0;
      
      switch (sortBy) {
        case 'name':
          comparison = a.name.localeCompare(b.name);
          break;
        case 'members':
          comparison = a.numberMembers - b.numberMembers;
          break;
        case 'rating':
          comparison = a.rating - b.rating;
          break;
        case 'created':
          comparison = new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
          break;
      }
      
      return sortOrder === 'asc' ? comparison : -comparison;
    });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading && communities.length === 0) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>
          <div className={styles.spinner}></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <h1>–°–æ–æ–±—â–µ—Å—Ç–≤–∞</h1>
        <button className={styles.createButton} onClick={handleCreateCommunity}>
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
          –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
        </button>
      </div>

      {/* –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {error && (
        <div className={styles.errorBanner}>
          <div className={styles.errorContent}>
            <span>‚ùå {error}</span>
            <div className={styles.errorActions}>
              <button onClick={clearError} className={styles.closeError}>‚úï</button>
              <button onClick={loadCommunities} className={styles.retryButton}>
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
      
      <div className={styles.filterSection}>
        {/* –ü–æ–∏—Å–∫ */}
        <div className={styles.searchBox}>
          <svg className={styles.searchIcon} width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
          <input 
            type="text" 
            placeholder="–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤..." 
            className={styles.searchInput}
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
        </div>



        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className={styles.filters}>
          {filterConfigs.map((filter) => (
            <FilterDropdown
              key={filter.label}
              label={filter.label === 'category' ? '–ö–∞—Ç–µ–≥–æ—Ä–∏—è' : 
                    filter.label === 'location' ? '–ì–æ—Ä–æ–¥' : 
                    filter.label === 'size' ? '–†–∞–∑–º–µ—Ä' : '–£—á–∞—Å—Ç–∏–µ'}
              options={filter.options}
              value={filters[filter.label] || ''}
              onChange={(value) => handleFilterChange(filter.label, value)}
            />
          ))}
        </div>

        {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
        <div className={styles.sortSection}>
          <span className={styles.sortLabel}>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</span>
          <div className={styles.sortButtons}>
            {[
              { key: 'name', label: '–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é' },
              { key: 'members', label: '–ü–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º' },
              { key: 'rating', label: '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É' },
              { key: 'created', label: '–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è' }
            ].map(({ key, label }) => (
              <button
                key={key}
                onClick={() => handleSort(key as any)}
                className={`${styles.sortButton} ${sortBy === key ? styles.active : ''}`}
              >
                {label}
                {sortBy === key && (
                  <span className={styles.sortIcon}>
                    {sortOrder === 'asc' ? '‚Üë' : '‚Üì'}
                  </span>
                )}
              </button>
            ))}
          </div>
        </div>
      </div>
      
      <div className={styles.contentWrapper}>
        <div className={styles.listView}>
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className={styles.statsBar}>
            <span className={styles.resultsCount}>
              {filteredAndSortedCommunities.length} –∏–∑ {communities.length} —Å–æ–æ–±—â–µ—Å—Ç–≤
            </span>
            {loading && (
              <span className={styles.loadingIndicator}>
                <div className={styles.miniSpinner}></div>
                –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
              </span>
            )}
          </div>

          {/* –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤ */}
          {filteredAndSortedCommunities.length > 0 ? (
            <div className={styles.communitiesGrid}>
              {filteredAndSortedCommunities.map((community) => (
                <CommunityCard key={community.id} community={community} />
              ))}
            </div>
          ) : (
            <div className={styles.noResults}>
              <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#999" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="8" y1="15" x2="16" y2="15"></line>
                <line x1="9" y1="9" x2="9.01" y2="9"></line>
                <line x1="15" y1="9" x2="15.01" y2="9"></line>
              </svg>
              <p>
                {search || Object.values(filters).some(f => f) 
                  ? '–°–æ–æ–±—â–µ—Å—Ç–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' 
                  : '–°–æ–æ–±—â–µ—Å—Ç–≤–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã'
                }
              </p>
              <p>
                {search || Object.values(filters).some(f => f)
                  ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'
                  : '–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!'
                }
              </p>
              {!search && !Object.values(filters).some(f => f) && (
                <button 
                  onClick={handleCreateCommunity}
                  className={styles.createFirstButton}
                >
                  –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
                </button>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CommunitiesListPage;