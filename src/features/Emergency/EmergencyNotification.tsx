// src/features/Emergency/EmergencyNotification.tsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  EmergencyResponse, 
  EMERGENCY_TYPE_LABELS, 
  EMERGENCY_TYPE_ICONS, 
  EMERGENCY_TYPE_COLORS,
  EmergencyType 
} from '../../types/emergencyTypes';
import styles from './EmergencyNotification.module.css';

interface EmergencyNotificationProps {
  emergencyData?: EmergencyResponse | null;
}

const EmergencyNotification: React.FC<EmergencyNotificationProps> = ({ emergencyData }) => {
  const navigate = useNavigate();

  const handleRefClick = () => {
    navigate('/reference');
  };

  const handleEvacuationClick = () => {
    navigate('/evacuation');
  };

  const handleSupportClick = () => {
    navigate('/support');
  };

  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const currentEvent = emergencyData?.event?.[0];
  const referenceInfo = emergencyData?.referenceInfo?.[0];

  const getEmergencyTypeText = (type: EmergencyType) => {
    return EMERGENCY_TYPE_LABELS[type] || '–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è';
  };

  const getEmergencyIcon = (type: EmergencyType) => {
    return EMERGENCY_TYPE_ICONS[type] || '‚ö†Ô∏è';
  };

  const getEmergencyColor = (type: EmergencyType) => {
    return EMERGENCY_TYPE_COLORS[type] || '#dc2626';
  };

  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch {
      return '–°–µ–π—á–∞—Å';
    }
  };

  const defaultInstructions = [
    '–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ',
    '–°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º —Å–ª—É–∂–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
    '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—Ñ—Ç—ã –ø—Ä–∏ —ç–≤–∞–∫—É–∞—Ü–∏–∏',
    '–î–≤–∏–≥–∞–π—Ç–µ—Å—å –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –≤—ã—Ö–æ–¥—É',
    '–ü–æ–º–æ–≥–∞–π—Ç–µ —Ç–µ–º, –∫–æ–º—É –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å',
    '–ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É –¥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è'
  ];

  const emergencyType = currentEvent?.emergencyType || 'OTHER';
  const emergencyColor = getEmergencyColor(emergencyType);

  return (
    <div className={styles.alertContainer}>
      <div 
        className={styles.alertHeader}
        style={{ borderTopColor: emergencyColor }}
      >
        <div 
          className={styles.alertIcon}
          style={{ color: emergencyColor }}
        >
          <div className={styles.emergencyIcon}>
            {getEmergencyIcon(emergencyType)}
          </div>
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
            <line x1="12" y1="9" x2="12" y2="13"></line>
            <line x1="12" y1="17" x2="12.01" y2="17"></line>
          </svg>
        </div>
        
        <h1 className={styles.alertTitle}>
          –í–Ω–∏–º–∞–Ω–∏–µ! {getEmergencyTypeText(emergencyType)}
        </h1>
        
        <p className={styles.alertSubtitle}>
          {currentEvent?.about || '–û–±—ä—è–≤–ª–µ–Ω —Ä–µ–∂–∏–º —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏'}
        </p>
        
        <div className={styles.alertTime}>
          {currentEvent ? formatDate(currentEvent.date) : '–°–µ–π—á–∞—Å'}
        </div>

        {currentEvent?.city && (
          <div className={styles.alertLocation}>
            üìç {currentEvent.city}
          </div>
        )}
      </div>
      
      <div className={styles.alertContent}>
        <div className={styles.alertMessage}>
          <p>{currentEvent?.about || '–û–±—ä—è–≤–ª–µ–Ω —Ä–µ–∂–∏–º —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Å–ª—É–∂–± —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è.'}</p>
          <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.</p>
        </div>
        
        <div className={styles.guidelines}>
          <h3>–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</h3>
          <ul>
            {(referenceInfo?.safetyInstructions?.length ? referenceInfo.safetyInstructions : defaultInstructions).map((instruction, index) => (
              <li key={index}>{instruction}</li>
            ))}
          </ul>
        </div>

        {referenceInfo?.emergencyContacts && referenceInfo.emergencyContacts.length > 0 && (
          <div className={styles.contacts}>
            <h3>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</h3>
            <div className={styles.contactsList}>
              {referenceInfo.emergencyContacts.map((contact, index) => (
                <a key={index} href={`tel:${contact}`} className={styles.contactLink}>
                  üìû {contact}
                </a>
              ))}
            </div>
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–∫–∞—Ö —ç–≤–∞–∫—É–∞—Ü–∏–∏ */}
        {referenceInfo?.evacuationPoints && referenceInfo.evacuationPoints.length > 0 && (
          <div className={styles.evacuationInfo}>
            <h3>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ—á–µ–∫ —ç–≤–∞–∫—É–∞—Ü–∏–∏: {referenceInfo.evacuationPoints.length}</h3>
            <p>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–∞—Ö —ç–≤–∞–∫—É–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ.</p>
          </div>
        )}
        
        <div className={styles.actionButtons}>
          <button 
            onClick={handleRefClick}
            className={`${styles.actionButton} ${styles.referenceBtn}`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <polygon points="1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"></polygon>
              <line x1="8" y1="2" x2="8" y2="18"></line>
              <line x1="16" y1="6" x2="16" y2="22"></line>
            </svg>
            <span>–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
            <svg className={styles.arrow} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <line x1="5" y1="12" x2="19" y2="12"></line>
              <polyline points="12 5 19 12 12 19"></polyline>
            </svg>
          </button>
          
          <button 
            onClick={handleEvacuationClick} 
            className={`${styles.actionButton} ${styles.evacuationBtn}`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
              <circle cx="12" cy="10" r="3"></circle>
            </svg>
            <span>–ú–µ—Å—Ç–∞ —ç–≤–∞–∫—É–∞—Ü–∏–∏</span>
            <svg className={styles.arrow} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <line x1="5" y1="12" x2="19" y2="12"></line>
              <polyline points="12 5 19 12 12 19"></polyline>
            </svg>
          </button>

          <button 
            onClick={handleSupportClick} 
            className={`${styles.actionButton} ${styles.supportBtn}`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M22 12h-4l-3 9L9 3l-3 9H2"></path>
            </svg>
            <span>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</span>
            <svg className={styles.arrow} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <line x1="5" y1="12" x2="19" y2="12"></line>
              <polyline points="12 5 19 12 12 19"></polyline>
            </svg>
          </button>
        </div>
      </div>
      
      <div className={styles.footer}>
        <p>–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ß–° ‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã: 112</p>
        {emergencyData && (
          <p className={styles.dataInfo}>
            –ê–∫—Ç–∏–≤–Ω—ã—Ö –ß–°: {emergencyData.event.length} ‚Ä¢ 
            –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleTimeString('ru-RU')}
          </p>
        )}
      </div>
    </div>
  );
};

export default EmergencyNotification;