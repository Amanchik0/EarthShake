  import React, { useState, useMemo } from 'react';
  import EmergencyBanner from '../../components/Evacuation/EmergencyBanner';
  import EvacuationMap from '../../components/Evacuation/EvacuationMap';
  import LocationCard from '../../components/Evacuation/LocationCard';
  import InfoCard from '../../components/Evacuation/InfoCard';
  import Checklist from '../../components/Evacuation/Checklist';
  import Notifications from '../../components/Evacuation/Notifications';
  import EventHeader from '../../components/Evacuation/EventHeafer';
  import { Location, Notification, ChecklistItem, InfoItem } from '../../types/types';
  import { EmergencyResponse, EMERGENCY_TYPE_LABELS, EMERGENCY_TYPE_ICONS } from '../../types/emergencyTypes';
  import styles from './EvacuationPage.module.css';

  interface EvacuationPageProps {
    emergencyData?: EmergencyResponse | null;
  }

  const EvacuationPage: React.FC<EvacuationPageProps> = ({ emergencyData }) => {
    const [activeTab, setActiveTab] = useState('home');
    const [checklist, setChecklist] = useState<ChecklistItem[]>([
        { id: '1', text: '–î–æ–∫—É–º–µ–Ω—Ç—ã (–ø–∞—Å–ø–æ—Ä—Ç, –º–µ–¥. –ø–æ–ª–∏—Å)', checked: true },
      { id: '2', text: '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –∞–ø—Ç–µ—á–∫–∞', checked: true },
      { id: '3', text: '–ó–∞–ø–∞—Å –ø–∏—Ç—å–µ–≤–æ–π –≤–æ–¥—ã –∏ –ø–∏—â–∏', checked: false },
      { id: '4', text: '–°—Ä–µ–¥—Å—Ç–≤–∞ —Å–≤—è–∑–∏ –∏ –∑–∞—Ä—è–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', checked: false },
      { id: '5', text: '–û–¥–µ–∂–¥–∞ –ø–æ —Å–µ–∑–æ–Ω—É', checked: false }
    ]);

    const baseLocations: Location[] = [
      {
        id: '1',
        name: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —É–±–µ–∂–∏—â–µ ‚Ññ1',
        address: '—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 123',
        type: 'shelter',
        status: 'open',
        capacity: 30,
        workingHours: '24/7'
      },
      {
        id: '2',
        name: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å "–ê–ª–º–∞—Ç—ã"',
        address: '–ø—Ä. –ê–±–∞—è, 45',
        type: 'evacuation',
        status: 'open',
        capacity: 200,
        workingHours: '24/7'
      },
      {
        id: '3',
        name: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—É–Ω–∫—Ç ‚Ññ5',
        address: '—É–ª. –¢–æ–ª–µ –±–∏, 67',
        type: 'medical',
        status: 'open',
        capacity: 50,
        workingHours: '24/7'
      }
    ];

    const apiLocations: Location[] = useMemo(() => {
      if (!emergencyData?.referenceInfo?.[0]?.evacuationPoints) return [];
      
      return emergencyData.referenceInfo[0].evacuationPoints.map((point, index) => ({
        id: `api-${index}`,
        name: `–¢–æ—á–∫–∞ —ç–≤–∞–∫—É–∞—Ü–∏–∏ ${index + 1}`,
        address: `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${point.x.toFixed(4)}, ${point.y.toFixed(4)}`,
        type: 'evacuation' as const,
        status: 'open' as const,
        capacity: 100,
        workingHours: '24/7',
        coordinates: { lat: point.x, lng: point.y }
      }));
    }, [emergencyData]);

    const allLocations = [...baseLocations, ...apiLocations];

    const notifications: Notification[] = useMemo(() => {
      const baseNotifications: Notification[] = [
        {
          id: '1',
          title: '–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —É–±–µ–∂–∏—â–∞',
          message: '–ù–æ–≤–æ–µ —É–±–µ–∂–∏—â–µ –æ—Ç–∫—Ä—ã—Ç–æ –ø–æ –∞–¥—Ä–µ—Å—É —É–ª. –í–æ—Å—Ç–æ—á–Ω–∞—è, 56.',
          time: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
          icon: 'üîî'
        }
      ];

      if (emergencyData?.event?.[0]) {
        const event = emergencyData.event[0];
        const emergencyNotification: Notification = {
          id: 'emergency-' + event.id,
          title: EMERGENCY_TYPE_LABELS[event.emergencyType] || '–ß–°',
          message: event.about,
          time: new Date(event.date).toLocaleString('ru-RU'),
          icon: EMERGENCY_TYPE_ICONS[event.emergencyType] || '‚ö†Ô∏è'
        };
        return [emergencyNotification, ...baseNotifications];
      }

      return baseNotifications;
    }, [emergencyData]);

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ß–°
    const infoItems: InfoItem[] = useMemo(() => {
      const baseInfo: InfoItem[] = [
        {
          id: '1',
          icon: 'üìã',
          title: '–î–æ–∫—É–º–µ–Ω—Ç—ã',
          text: '–í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –ø–∞—Å–ø–æ—Ä—Ç, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –±—É–º–∞–≥–∏ –ø—Ä–∏ —ç–≤–∞–∫—É–∞—Ü–∏–∏.'
        },
        {
          id: '2',
          icon: 'üéí',
          title: '–ê–≤–∞—Ä–∏–π–Ω—ã–π –Ω–∞–±–æ—Ä',
          text: '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ä—é–∫–∑–∞–∫ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –≤–µ—â–∞–º–∏: –≤–æ–¥–∞, –µ–¥–∞, –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, —Ñ–æ–Ω–∞—Ä–∏–∫.'
        }
      ];

      if (emergencyData?.referenceInfo?.[0]?.safetyInstructions) {
        const safetyInfo: InfoItem = {
          id: 'safety',
          icon: '‚ö†Ô∏è',
          title: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
          text: emergencyData.referenceInfo[0].safetyInstructions.slice(0, 2).join(' ')
        };
        return [safetyInfo, ...baseInfo];
      }

      return baseInfo;
    }, [emergencyData]);

    const handleChecklistToggle = (id: string) => {
      setChecklist(checklist.map(item => 
        item.id === id ? { ...item, checked: !item.checked } : item
      ));
    };

    const handleBack = () => {
      window.history.back();
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ß–°
    const getDangerLevel = () => {
      if (!emergencyData?.event?.[0]) return 'medium';
      
      const emergencyType = emergencyData.event[0].emergencyType;
      const highDangerTypes = ['RADIATION_LEAK', 'CHEMICAL_SPILL', 'TSUNAMI', 'VOLCANO', 'TERROR_ATTACK'];
      const mediumDangerTypes = ['EARTHQUAKE', 'FIRE', 'FLOOD', 'EXPLOSION'];
      
      if (highDangerTypes.includes(emergencyType)) return 'high';
      if (mediumDangerTypes.includes(emergencyType)) return 'medium';
      return 'low';
    };

    const dangerLevel = getDangerLevel();
    const emergencyEvent = emergencyData?.event?.[0];

    return (
      <div className={styles.container}>
        <EventHeader onBack={handleBack} tag="emergency" />
        
        <h1 className={styles.pageTitle}>–ú–µ—Å—Ç–∞ –¥–ª—è —ç–≤–∞–∫—É–∞—Ü–∏–∏</h1>
        
        <div className={`${styles.alertStatus} ${styles[dangerLevel]}`}>
          <span></span>
          <span>
            {dangerLevel === 'high' && '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏'}
            {dangerLevel === 'medium' && '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏'}
            {dangerLevel === 'low' && '–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏'}
          </span>
          {emergencyEvent && (
            <span className={styles.emergencyType}>
              {EMERGENCY_TYPE_ICONS[emergencyEvent.emergencyType]} {EMERGENCY_TYPE_LABELS[emergencyEvent.emergencyType]}
            </span>
          )}
        </div>
        
        <p className={styles.pageDescription}>
          {emergencyEvent ? (
            <>
              –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–∞—Ö —ç–≤–∞–∫—É–∞—Ü–∏–∏ –≤ —Å–≤—è–∑–∏ —Å {EMERGENCY_TYPE_LABELS[emergencyEvent.emergencyType].toLowerCase()}.
              –î–æ—Å—Ç—É–ø–Ω–æ {allLocations.length} —Ç–æ—á–µ–∫ —ç–≤–∞–∫—É–∞—Ü–∏–∏.
            </>
          ) : (
            '–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è —ç–≤–∞–∫—É–∞—Ü–∏–∏, –≤–∫–ª—é—á–∞—è —É–±–µ–∂–∏—â–∞, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—É–Ω–∫—Ç—ã –∏ —Ü–µ–Ω—Ç—Ä—ã —Ä–∞–∑–¥–∞—á–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.'
          )}
        </p>
        
        <EmergencyBanner emergencyData={emergencyData} />
        
        {/* <EvacuationMap 
          locations={allLocations} 
          emergencyData={emergencyData}
        /> */}
        
        <div className={styles.gridContainer}>
          <div className={styles.evacuationList}>
            <div className={styles.evacuationHeader}>
              <div className={styles.evacuationTitle}>
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞ —ç–≤–∞–∫—É–∞—Ü–∏–∏ ({allLocations.length})
              </div>
              <div className={styles.evacuationSearch}>
                <span>üîç</span>
                <input type="text" placeholder="–ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é" />
              </div>
            </div>
            
            {apiLocations.length > 0 && (
              <div className={styles.sectionHeader}>
                <h3>üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ —ç–≤–∞–∫—É–∞—Ü–∏–∏</h3>
                <p>–¢–æ—á–∫–∏ —ç–≤–∞–∫—É–∞—Ü–∏–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±–∞–º–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è</p>
              </div>
            )}
            
            <div className={styles.locationCards}>
              {allLocations.map(location => (
                <LocationCard 
                  key={location.id} 
                  location={location}
                  isEmergencyPoint={location.id.startsWith('api-')}
                />
              ))}
            </div>
          </div>
          
          <div className={styles.sidebar}>
            <InfoCard title="–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" items={infoItems} />
            
            <Checklist 
              title="–ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —ç–≤–∞–∫—É–∞—Ü–∏–∏" 
              items={checklist} 
              onToggle={handleChecklistToggle} 
            />
            
            <Notifications title="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è" items={notifications} />
            
            {emergencyData?.referenceInfo?.[0]?.emergencyContacts && (
              <div className={styles.emergencyContacts}>
                <h3>–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</h3>
                <div className={styles.contactsList}>
                  {emergencyData.referenceInfo[0].emergencyContacts.map((contact, index) => (
                    <a key={index} href={`tel:${contact}`} className={styles.contactLink}>
                      üìû {contact}
                    </a>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  export default EvacuationPage;