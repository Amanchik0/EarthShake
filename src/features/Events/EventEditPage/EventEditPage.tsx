import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import PageHeader from '../../../components/EventEdit/PageHeader';
import FormSection from '../../../components/EventEdit/FormSection';
import FormButtons from '../../../components/EventEdit/FormButtons';
import FormRow from '../../../components/EventEdit/FormRow';
import EventPhoto from '../../../components/EventEdit/EventPhoto';
import FormGroup from '../../../components/EventEdit/FormGroup';
import CitySelect from '../../../components/CitySelect/CitySelect';
import { useEventAPI } from '../../../hooks/useEventApi';
import { useAuth } from '../../../components/auth/AuthContext';
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import styles from './EventEditPage.module.css';
import { BackendEventData, EventUpdateData } from '../../../types/event';

const MAPBOX_TOKEN = 'pk.eyJ1IjoiYW56b24iLCJhIjoiY202cWFhNW5qMGViaDJtc2J2eXhtZTdraCJ9.V7DT16ZhFkjt88aEWYRNiw';

mapboxgl.accessToken = MAPBOX_TOKEN;

interface EventFormData {
  eventName: string;
  description: string;
  content: string;
  eventType: 'REGULAR' | 'EMERGENCY';
  emergencyType: string | null;
  eventDate: string;
  eventTime: string;
  location: string;
  city: string;
  coordinates: { x: number; y: number };
  tags: string[];
  mediaUrl: string;
}

const EventEditPage: React.FC = () => {
  const { id: eventId } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { user } = useAuth();
  const { loading, error, loadEvent, updateEvent, uploadMedia, clearError } = useEventAPI();

  // –ö–∞—Ä—Ç–∞
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const markerRef = useRef<mapboxgl.Marker | null>(null);
  const [mapError, setMapError] = useState<string>('');
  const [mapLoading, setMapLoading] = useState<boolean>(true);
  
  const [uploading, setUploading] = useState(false);
  const [originalEvent, setOriginalEvent] = useState<BackendEventData | null>(null);
  const [formData, setFormData] = useState<EventFormData>({
    eventName: '',
    description: '',
    content: '',
    eventType: 'REGULAR',
    emergencyType: null,
    eventDate: '',
    eventTime: '',
    location: '',
    city: '',
    coordinates: { x: 76.9050, y: 43.2370 }, // –ê–ª–º–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    tags: [],
    mediaUrl: ''
  });

  // Cleanup –∫–∞—Ä—Ç—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
        mapRef.current = null;
      }
    };
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
  useEffect(() => {
    if (eventId) {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å ID:', eventId);
      loadEventData(eventId);
    }
  }, [eventId]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
  useEffect(() => {
    if (originalEvent && formData.coordinates.x && formData.coordinates.y) {
      console.log('üó∫Ô∏è –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É');
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã DOM —ç–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ–ª —Å–æ–∑–¥–∞—Ç—å—Å—è
      setTimeout(() => {
        initializeMap();
      }, 100);
    }
  }, [originalEvent]);

  const loadEventData = async (id: string) => {
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å ID:', id);
    const eventData = await loadEvent(id);
    
    if (eventData) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—É—á–µ–Ω—ã:', eventData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ
      const currentUser = user?.username || 'anonymous';
      if (eventData.author !== currentUser) {
        console.warn('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º —Å–æ–±—ã—Ç–∏—è');
        navigate('/events', { replace: true });
        return;
      }

      setOriginalEvent(eventData);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ä–º—ã
      const scheduledDate = eventData.metadata?.scheduledDate 
        ? new Date(eventData.metadata.scheduledDate) 
        : new Date(eventData.dateTime);
      
      const imageUrl = Array.isArray(eventData.mediaUrl) 
        ? (eventData.mediaUrl[0] || '') 
        : (eventData.mediaUrl || '');
      
      const formDataToSet: EventFormData = {
        eventName: eventData.title,
        description: eventData.description,
        content: eventData.content,
        eventType: eventData.eventType,
        emergencyType: eventData.emergencyType || null,
        eventDate: scheduledDate.toISOString().split('T')[0],
        eventTime: scheduledDate.toTimeString().slice(0, 5),
        location: eventData.metadata?.address || '',
        city: eventData.city,
        coordinates: {
          x: eventData.location.x,
          y: eventData.location.y
        },
        tags: eventData.tags || [],
        mediaUrl: imageUrl
      };
      
      console.log('üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formDataToSet);
      setFormData(formDataToSet);
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è');
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  const initializeMap = () => {
    if (mapRef.current || !formData.coordinates.x || !formData.coordinates.y) return;

    const mapContainer = document.getElementById('event-edit-map');
    if (!mapContainer) {
      console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    try {
      console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', formData.coordinates);
      
      mapRef.current = new mapboxgl.Map({
        container: mapContainer,
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [formData.coordinates.x, formData.coordinates.y],
        zoom: 12,
        attributionControl: false
      });

      mapRef.current.on('load', () => {
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        setMapError('');
        setMapLoading(false);
      });

      mapRef.current.on('error', (e) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã:', e);
        setMapError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
        setMapLoading(false);
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      mapRef.current.addControl(new mapboxgl.NavigationControl(), 'top-right');

      // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
      markerRef.current = new mapboxgl.Marker({ 
        draggable: true,
        color: '#FF6B98'
      })
        .setLngLat([formData.coordinates.x, formData.coordinates.y])
        .addTo(mapRef.current);

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
      markerRef.current.on('dragend', async () => {
        if (markerRef.current) {
          const lngLat = markerRef.current.getLngLat();
          console.log('üó∫Ô∏è –ú–∞—Ä–∫–µ—Ä –ø–µ—Ä–µ—Ç–∞—â–µ–Ω:', lngLat);
          await updateLocationFromCoordinates(lngLat.lng, lngLat.lat);
        }
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
      mapRef.current.on('click', async (e) => {
        if (markerRef.current) {
          console.log('üó∫Ô∏è –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ:', e.lngLat);
          markerRef.current.setLngLat([e.lngLat.lng, e.lngLat.lat]);
          await updateLocationFromCoordinates(e.lngLat.lng, e.lngLat.lat);
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
      setMapError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã');
      setMapLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞
  const updateLocationFromCoordinates = async (lng: number, lat: number) => {
    setFormData(prev => ({
      ...prev,
      coordinates: { x: lng, y: lat },
      location: 'üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞...'
    }));
    
    try {
      // –ü—Ä–æ—Å—Ç–æ–µ –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Mapbox
      const response = await fetch(
        `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${MAPBOX_TOKEN}&language=ru&limit=1&country=KZ`
      );
      
      if (response.ok) {
        const data = await response.json();
        if (data.features && data.features.length > 0) {
          const address = data.features[0].place_name || `${lng.toFixed(6)}, ${lat.toFixed(6)}`;
          setFormData(prev => ({
            ...prev,
            coordinates: { x: lng, y: lat },
            location: address
          }));
          return;
        }
      }
      
      // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      setFormData(prev => ({
        ...prev,
        coordinates: { x: lng, y: lat },
        location: `${lng.toFixed(6)}, ${lat.toFixed(6)}`
      }));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      setFormData(prev => ({
        ...prev,
        coordinates: { x: lng, y: lat },
        location: `${lng.toFixed(6)}, ${lat.toFixed(6)}`
      }));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–æ—Ä–º—ã
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleTagsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const tagsString = e.target.value;
    const tags = tagsString.split(',').map(tag => tag.trim()).filter(tag => tag);
    setFormData(prev => ({
      ...prev,
      tags
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
  const handleCityChange = (cityName: string) => {
    setFormData(prev => ({ ...prev, city: cityName }));
    
    if (cityName) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Mapbox –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞
      geocodeCity(cityName);
    }
  };

  // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Mapbox API
  const geocodeCity = async (cityName: string) => {
    try {
      console.log('üåç –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:', cityName);
      
      const response = await fetch(
        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(cityName)}.json?access_token=${MAPBOX_TOKEN}&limit=1&country=KZ&language=ru`
      );
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${response.status}`);
      }
      
      const data = await response.json();

      if (data.features && data.features.length > 0) {
        const [lng, lat] = data.features[0].center;
        console.log('üìç –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', { lng, lat });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        if (mapRef.current) {
          mapRef.current.flyTo({
            center: [lng, lat],
            zoom: 12,
            duration: 2000
          });
        }

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–∞—Ä–∫–µ—Ä
        if (markerRef.current) {
          markerRef.current.setLngLat([lng, lat]);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
        await updateLocationFromCoordinates(lng, lat);
      } else {
        console.warn('ü§∑ –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
  const handlePhotoUpload = async (file: File) => {
    setUploading(true);
    try {
      const mediaUrl = await uploadMedia(file);
      if (mediaUrl) {
        setFormData(prev => ({
          ...prev,
          mediaUrl
        }));
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
    } finally {
      setUploading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ (–ø—Ä–æ—Å—Ç–æ–µ - –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ)
  const handlePhotoDelete = async () => {
    setFormData(prev => ({
      ...prev,
      mediaUrl: ''
    }));
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ handleSubmit –≤ EventEditPage.tsx

const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  
  if (!originalEvent || !eventId) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  const eventDateTime = new Date(`${formData.eventDate}T${formData.eventTime}`);
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ö–µ–º–æ–π API
  const updateData: EventUpdateData = {
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    eventType: formData.eventType,
    emergencyType: formData.emergencyType,
    title: formData.eventName,
    description: formData.description,
    content: formData.content,
    author: originalEvent.author,
    city: formData.city,
    location: {
      x: formData.coordinates.x,
      y: formData.coordinates.y
    },
    mediaUrl: formData.mediaUrl ? [formData.mediaUrl] : [],
    dateTime: eventDateTime.toISOString(),
    tags: formData.tags,
    usersIds: originalEvent.usersIds || [],
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    score: originalEvent.score || [],
    eventStatus: originalEvent.eventStatus || null,
    metadata: {
      address: formData.location,
      scheduledDate: eventDateTime.toISOString(),
      createdAt: originalEvent.metadata?.createdAt || new Date().toISOString(),
      isCommunity: originalEvent.metadata?.isCommunity || "false",
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è metadata
      ...originalEvent.metadata
    },
    comments: originalEvent.comments || [],
    archived: originalEvent.archived || false
  };

  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateData);
  
  // –ü–µ—Ä–µ–¥–∞–µ–º eventId –∫–∞–∫ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
  const success = await updateEvent(eventId, updateData);
  if (success) {
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    navigate(`/events/${eventId}`);
  }
};

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
  const handleDelete = async () => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?')) {
      return;
    }
    
    // –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∑–∞–≥–ª—É—à–∫–∞)');
    navigate('/events');
  };

  const handleCancel = () => {
    navigate(-1);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  if (!eventId) {
    return (
      <div className={styles.eventEditPage}>
        <div className={styles.mainContainer}>
          <div className={styles.error}>
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>ID —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
            <button onClick={() => navigate('/events')}>–ö —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π</button>
          </div>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className={styles.eventEditPage}>
        <div className={styles.mainContainer}>
          <div className={styles.error}>
            <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
            <p>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
            <button onClick={() => navigate('/login')}>–í–æ–π—Ç–∏</button>
          </div>
        </div>
      </div>
    );
  }

  if (loading && !originalEvent) {
    return (
      <div className={styles.eventEditPage}>
        <div className={styles.mainContainer}>
          <div className={styles.loading}>
            <div className={styles.spinner}></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.eventEditPage}>
        <div className={styles.mainContainer}>
          <div className={styles.error}>
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button onClick={() => navigate(-1)}>–ù–∞–∑–∞–¥</button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.eventEditPage}>
      <div className={styles.mainContainer}>
        <PageHeader 
          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è" 
          subtitle="–û–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Å–æ–±—ã—Ç–∏–∏" 
        />

        <div className={styles.eventFormContainer}>
          <form onSubmit={handleSubmit}>
            
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <FormSection title="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
              <FormGroup fullWidth>
                <label htmlFor="eventName">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è *</label>
                <input 
                  type="text" 
                  id="eventName" 
                  name="eventName" 
                  value={formData.eventName} 
                  onChange={handleChange}
                  required 
                  className={styles.input}
                />
                <div className={styles.hints}>–ö—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</div>
              </FormGroup>
              
              <EventPhoto 
                imageUrl={formData.mediaUrl}
                onPhotoUpload={handlePhotoUpload}
                onPhotoDelete={handlePhotoDelete}
                uploading={uploading}
              />
              
              <FormGroup fullWidth>
                <label htmlFor="description">–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *</label>
                <textarea 
                  id="description" 
                  name="description" 
                  rows={3} 
                  value={formData.description} 
                  onChange={handleChange}
                  required 
                  className={styles.textarea}
                />
                <div className={styles.hints}>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è</div>
              </FormGroup>

              <FormGroup fullWidth>
                <label htmlFor="content">–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *</label>
                <textarea 
                  id="content" 
                  name="content" 
                  rows={6} 
                  value={formData.content} 
                  onChange={handleChange}
                  required 
                  className={styles.textarea}
                />
                <div className={styles.hints}>–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: –ø—Ä–æ–≥—Ä–∞–º–º–∞, –ø—Ä–∞–≤–∏–ª–∞, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</div>
              </FormGroup>
            </FormSection>

            {/* –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è */}
            <FormSection title="–î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è">
              <FormRow>
                <FormGroup>
                  <label htmlFor="eventType">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</label>
                  <select 
                    id="eventType" 
                    name="eventType" 
                    value={formData.eventType} 
                    onChange={handleChange}
                    className={styles.select}
                  >
                    <option value="REGULAR">–û–±—ã—á–Ω–æ–µ</option>
                    <option value="EMERGENCY">–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ</option>
                  </select>
                </FormGroup>
                
                <FormGroup>
                  <label htmlFor="city">–ì–æ—Ä–æ–¥ *</label>
                  <CitySelect
                    value={formData.city}
                    onChange={handleCityChange}
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
                    required
                  />
                </FormGroup>
              </FormRow>
              
              <FormRow>
                <FormGroup>
                  <label htmlFor="eventDate">–î–∞—Ç–∞ *</label>
                  <input 
                    type="date" 
                    id="eventDate" 
                    name="eventDate" 
                    value={formData.eventDate} 
                    onChange={handleChange}
                    required 
                    className={styles.input}
                  />
                </FormGroup>
                
                <FormGroup>
                  <label htmlFor="eventTime">–í—Ä–µ–º—è *</label>
                  <input 
                    type="time" 
                    id="eventTime" 
                    name="eventTime" 
                    value={formData.eventTime} 
                    onChange={handleChange}
                    required 
                    className={styles.input}
                  />
                </FormGroup>
              </FormRow>

              <FormGroup fullWidth>
                <label htmlFor="tags">–¢–µ–≥–∏</label>
                <input 
                  type="text" 
                  id="tags" 
                  name="tags" 
                  value={formData.tags.join(', ')} 
                  onChange={handleTagsChange}
                  className={styles.input}
                  placeholder="—Å–ø–æ—Ä—Ç, —Ñ—É—Ç–±–æ–ª, –∫–æ–º–∞–Ω–¥–Ω–∞—è –∏–≥—Ä–∞"
                />
                <div className={styles.hints}>–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏</div>
              </FormGroup>
            </FormSection>

            {/* –õ–æ–∫–∞—Ü–∏—è */}
            <FormSection title="–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è">
              <FormGroup fullWidth>
                <label htmlFor="location">–ê–¥—Ä–µ—Å *</label>
                <input 
                  type="text" 
                  id="location" 
                  name="location" 
                  value={formData.location} 
                  onChange={handleChange}
                  required 
                  className={styles.input}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å"
                />
                <div className={styles.hints}>–¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–º–æ–∂–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ</div>
              </FormGroup>
              
              {/* –ö–∞—Ä—Ç–∞ */}
              <div className={styles.mapSection}>
                <label className={styles.label}>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ</label>
                
                {mapLoading && !mapError && (
                  <div className={styles.mapLoading}>
                    <div className={styles.spinner}></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
                  </div>
                )}
                
                <div
                  id="event-edit-map"
                  className={styles.mapContainer}
                  style={{ 
                    display: mapError ? 'none' : 'block',
                    opacity: mapLoading ? 0.5 : 1
                  }}
                />
                
                {mapError && (
                  <div className={styles.mapError}>
                    <p>üó∫Ô∏è {mapError}</p>
                    <p>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {formData.coordinates.x.toFixed(6)}, {formData.coordinates.y.toFixed(6)}</p>
                  </div>
                )}
                
                <div className={styles.mapHints}>
                  ‚Ä¢ –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –º–∞—Ä–∫–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞
                  <br />
                  ‚Ä¢ –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
                </div>
              </div>
            </FormSection>

            <FormButtons
              onCancel={handleCancel}
              onDelete={handleDelete}
              loading={loading}
            />
          </form>
        </div>
      </div>
    </div>
  );
};

export default EventEditPage;