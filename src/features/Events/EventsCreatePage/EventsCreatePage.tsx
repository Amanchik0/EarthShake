import React, { useState, useEffect, useRef } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../../components/auth/AuthContext';
import CitySelect from '../../../components/CitySelect/CitySelect';
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import styles from './EventCreatePage.module.css';

const MAPBOX_TOKEN = 'pk.eyJ1IjoiYW56b24iLCJhIjoiY202cWFhNW5qMGViaDJtc2J2eXhtZTdraCJ9.V7DT16ZhFkjt88aEWYRNiw';
const TWOGIS_API_KEY = '8b4cc23d-1ab4-4868-a785-3c14a80ead0c';
const DEFAULT_CENTER: [number, number] = [76.886, 43.238]; // –ê–ª–º–∞—Ç—ã

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –°–†–ê–ó–£ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
mapboxgl.accessToken = MAPBOX_TOKEN;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (—Å–æ–≥–ª–∞—Å–Ω–æ API)
interface EventCreateData {
  eventType: 'REGULAR' | 'EMERGENCY';
  emergencyType?: string | null;
  title: string;
  description: string;
  content: string;
  author: string; // –í—Å–µ–≥–¥–∞ username —Å–æ–∑–¥–∞—Ç–µ–ª—è
  city: string;
  location: {
    x: number;
    y: number;
  };
  mediaUrl: string[]; // –ú–∞—Å—Å–∏–≤ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  tags: string[];
  metadata: {
    address?: string | undefined;
    scheduledDate?: string;
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    createdForCommunity?: boolean;
    communityId?: string;
    communityName?: string;
    [key: string]: any;
  };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
interface EventCreateForm {
  title: string;
  description: string;
  content: string;
  city: string;
  eventType: 'REGULAR' | 'EMERGENCY';
  tags: string[];
  location: {
    x: number;
    y: number;
    address?: string;
  };
  mediaFile?: File | null;
  dateTime: string;
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
  isForCommunity: boolean;
  communityId?: string | undefined;
  communityName?: string | undefined;
}

const EventCreatePage: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { user } = useAuth();
  const map = useRef<mapboxgl.Map | null>(null);
  const marker = useRef<mapboxgl.Marker | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
  const searchParams = new URLSearchParams(location.search);
  const communityId = searchParams.get('communityId');
  const authorType = searchParams.get('authorType');

  const [communityInfo, setCommunityInfo] = useState<{ id: string; name: string } | null>(null);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º callback ref –≤–º–µ—Å—Ç–æ useRef –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const mapCallbackRef = React.useCallback((node: HTMLDivElement | null) => {
    if (node && !map.current) {
      console.log('üì¶ Callback ref: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤', node);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥–æ—Ç–æ–≤
      setTimeout(() => {
        initializeMapFromCallback(node);
      }, 100);
    }
  }, []);

  const initializeMapFromCallback = (container: HTMLDivElement) => {
    if (map.current) return;

    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ callback ref');
    
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
      container.style.width = '100%';
      container.style.height = '350px';
      container.style.minHeight = '350px';
      container.style.display = 'block';

      const rect = container.getBoundingClientRect();
      console.log('üìè –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (callback):', rect.width, 'x', rect.height);
      
      if (rect.width === 0 || rect.height === 0) {
        console.error('‚ùå –ù—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ callback ref');
        setMapError('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã');
        setMapLoading(false);
        return;
      }

      map.current = new mapboxgl.Map({
        container: container,
        style: 'mapbox://styles/mapbox/streets-v11',
        center: DEFAULT_CENTER,
        zoom: 10,
        attributionControl: false
      });

      console.log('‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ callback ref');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      setupMapHandlers();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback ref:', error);
      setMapError(`–û—à–∏–±–∫–∞ callback ref: ${error instanceof Error ? error.message : String(error)}`);
      setMapLoading(false);
    }
  };

  const setupMapHandlers = () => {
    if (!map.current) return;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    map.current.on('load', () => {
      console.log('‚úÖ –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (callback)');
      setMapError('');
      setMapLoading(false);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    map.current.on('error', (e) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã (callback):', e);
      setMapError(`–û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã: ${e.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setMapLoading(false);
    });

    // –ö–æ–Ω—Ç—Ä–æ–ª—ã
    map.current.addControl(new mapboxgl.NavigationControl(), 'top-right');

    // –ú–∞—Ä–∫–µ—Ä
    marker.current = new mapboxgl.Marker({ 
      draggable: true,
      color: '#FF6B98'
    })
      .setLngLat(DEFAULT_CENTER)
      .addTo(map.current);

    // –°–æ–±—ã—Ç–∏—è –º–∞—Ä–∫–µ—Ä–∞
    marker.current.on('dragend', async () => {
      if (marker.current) {
        const lngLat = marker.current.getLngLat();
        await updateLocationFromCoordinates(lngLat.lng, lngLat.lat);
      }
    });

    // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ
    map.current.on('click', async (e) => {
      if (marker.current) {
        marker.current.setLngLat([e.lngLat.lng, e.lngLat.lat]);
        await updateLocationFromCoordinates(e.lngLat.lng, e.lngLat.lat);
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
    updateLocationFromCoordinates(DEFAULT_CENTER[0], DEFAULT_CENTER[1]);
  };

  const [showNotification, setShowNotification] = useState(false);
  const [notificationMessage, setNotificationMessage] = useState('');
  const [isSuccess, setIsSuccess] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const [formData, setFormData] = useState<EventCreateForm>({
    title: '',
    description: '',
    content: '',
    city: '',
    eventType: 'REGULAR',
    tags: [],
    location: {
      x: DEFAULT_CENTER[0],
      y: DEFAULT_CENTER[1],
      address: ''
    },
    mediaFile: null,
    dateTime: '',
    isForCommunity: false,
    communityId: undefined,
    communityName: undefined
  });

  const [mapError, setMapError] = useState<string>('');
  const [mapLoading, setMapLoading] = useState<boolean>(true);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç –µ–≥–æ –∏–º–µ–Ω–∏
  useEffect(() => {
    if (communityId && authorType === 'community') {
      fetchCommunityInfo(communityId);
    }
  }, [communityId, authorType]);

  const fetchCommunityInfo = async (id: string) => {
    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch(`http://localhost:8090/api/community/${id}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const communityData = await response.json();
        setCommunityInfo({
          id: communityData.id,
          name: communityData.name
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        setFormData(prev => ({
          ...prev,
          isForCommunity: true,
          communityId: communityData.id,
          communityName: communityData.name,
          city: communityData.city || prev.city
        }));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ:', error);
    }
  };

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (map.current) {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ä—Ç—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
        map.current.remove();
        map.current = null;
      }
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 2GIS API
  const reverseGeocode2GIS = async (lng: number, lat: number): Promise<string> => {
    try {
      console.log(`üåç –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ 2GIS –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${lng}, ${lat}`);
      
      const response = await fetch(
        `https://catalog.api.2gis.com/3.0/items/geocode?lat=${lat}&lon=${lng}&key=${TWOGIS_API_KEY}&fields=items.address_name,items.full_name,items.point&radius=1000`
      );
      
      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ 2GIS API:', response.status, response.statusText);
        throw new Error(`2GIS API error: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('üó∫Ô∏è –û—Ç–≤–µ—Ç 2GIS API:', data);

      if (data.result && data.result.items && data.result.items.length > 0) {
        const item = data.result.items[0];
        console.log('üìç –ù–∞–π–¥–µ–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ 2GIS:', item);
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å
        let address = '';
        if (item.address_name) {
          address = item.address_name;
        } else if (item.full_name) {
          address = item.full_name;
        } else if (item.name) {
          address = item.name;
        }
        
        if (address) {
          console.log('‚úÖ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ 2GIS:', address);
          return address;
        }
      }
      
      console.log('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ 2GIS API');
      throw new Error('No address found in 2GIS response');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ 2GIS –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  };

  // Fallback —Ñ—É–Ω–∫—Ü–∏—è —á–µ—Ä–µ–∑ Mapbox
  const reverseGeocodeMapbox = async (lng: number, lat: number): Promise<string> => {
    try {
      console.log(`üåç Fallback: –ø–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ Mapbox –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${lng}, ${lat}`);
      
      const response = await fetch(
        `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${MAPBOX_TOKEN}&language=ru&types=address,poi,place,locality,neighborhood&limit=1&country=KZ`
      );
      
      if (!response.ok) {
        throw new Error(`Mapbox API error: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('üó∫Ô∏è –û—Ç–≤–µ—Ç Mapbox API (fallback):', data);

      if (data.features && data.features.length > 0) {
        const feature = data.features[0];
        
        let addressParts: string[] = [];
        let hasDetailedAddress = false;
        
        if (feature.address && feature.text) {
          addressParts.push(`${feature.text}, ${feature.address}`);
          hasDetailedAddress = true;
        } else if (feature.text && feature.place_type && feature.place_type.includes('address')) {
          addressParts.push(feature.text);
          hasDetailedAddress = true;
        } else if (feature.text && feature.place_type && feature.place_type.includes('poi')) {
          addressParts.push(feature.text);
          hasDetailedAddress = true;
        } else if (feature.text) {
          addressParts.push(feature.text);
        }
        
        if (feature.context && Array.isArray(feature.context)) {
          feature.context.forEach((ctx: any) => {
            if (ctx.id && ctx.id.includes('neighborhood') && !hasDetailedAddress) {
              addressParts.push(ctx.text);
            } else if (ctx.id && ctx.id.includes('locality') && !hasDetailedAddress) {
              addressParts.push(ctx.text);
            }
          });
          
          const city = feature.context.find((ctx: any) => ctx.id && ctx.id.includes('place'));
          if (city && city.text) {
            addressParts.push(city.text);
          }
        }
        
        const uniqueAddressParts = [...new Set(addressParts)];
        let finalAddress = uniqueAddressParts.join(', ');
        
        if (uniqueAddressParts.length === 1 || !hasDetailedAddress) {
          finalAddress += ` (${lng.toFixed(6)}, ${lat.toFixed(6)})`;
        }
        
        console.log('‚úÖ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Mapbox (fallback):', finalAddress);
        return finalAddress;
      }
      
      throw new Error('No address found in Mapbox response');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Mapbox –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å fallback
  const reverseGeocode = async (lng: number, lat: number): Promise<string> => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º 2GIS
      return await reverseGeocode2GIS(lng, lat);
    } catch (error) {
      console.log('‚ö†Ô∏è 2GIS –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º Mapbox fallback');
      try {
        // –ï—Å–ª–∏ 2GIS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º Mapbox
        return await reverseGeocodeMapbox(lng, lat);
      } catch (fallbackError) {
        console.error('‚ùå –û–±–∞ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
        return `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lng.toFixed(6)}, ${lat.toFixed(6)}`;
      }
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∞–¥—Ä–µ—Å–∞
  const updateLocationFromCoordinates = async (lng: number, lat: number) => {
    console.log(`üìç –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é: ${lng}, ${lat}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    setFormData(prev => ({
      ...prev,
      location: {
        ...prev.location,
        x: lng,
        y: lat,
        address: 'üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞...'
      }
    }));
    
    // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
    try {
      const address = await reverseGeocode(lng, lat);
      setFormData(prev => ({
        ...prev,
        location: {
          ...prev.location,
          x: lng,
          y: lat,
          address: address
        }
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      setFormData(prev => ({
        ...prev,
        location: {
          ...prev.location,
          x: lng,
          y: lat,
          address: `‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lng.toFixed(6)}, ${lat.toFixed(6)}`
        }
      }));
    }
  };

  // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ -> –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
  const geocodeCity = async (city: string) => {
    try {
      const response = await fetch(
        `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(city)}.json?access_token=${MAPBOX_TOKEN}&limit=1&country=KZ`
      );
      const data = await response.json();

      if (data.features && data.features.length > 0) {
        const [lng, lat] = data.features[0].center;

        if (map.current) {
          map.current.flyTo({
            center: [lng, lat],
            zoom: 12
          });
        }

        if (marker.current) {
          marker.current.setLngLat([lng, lat]);
        }

        await updateLocationFromCoordinates(lng, lat);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
  const handleCityChange = (cityName: string) => {
    setFormData(prev => ({ ...prev, city: cityName }));
    if (cityName) {
      geocodeCity(cityName);
    }
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É
    if (errors.city) {
      setErrors(prev => ({ ...prev, city: '' }));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤
  const handleTagsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { value, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      tags: checked 
        ? [...prev.tags, value]
        : prev.tags.filter(tag => tag !== value)
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFormData(prev => ({ ...prev, mediaFile: e.target.files![0] }));
      if (errors.mediaFile) {
        setErrors(prev => ({ ...prev, mediaFile: '' }));
      }
    }
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.title.trim()) {
      newErrors.title = '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!formData.description.trim()) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!formData.city.trim()) {
      newErrors.city = '–ì–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }

    if (!formData.dateTime) {
      newErrors.dateTime = '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã';
    } else {
      const eventDate = new Date(formData.dateTime);
      const now = new Date();
      if (eventDate <= now) {
        newErrors.dateTime = '–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º';
      }
    }

    if (!formData.mediaFile) {
      newErrors.mediaFile = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (formData.location.x === DEFAULT_CENTER[0] && formData.location.y === DEFAULT_CENTER[1]) {
      newErrors.location = '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!user) {
      showNotificationMessage('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è', false);
      return;
    }

    if (!validateForm()) {
      showNotificationMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ', false);
      return;
    }

    setIsSubmitting(true);

    try {
      let mediaUrls: string[] = [];

      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (formData.mediaFile) {
        const token = localStorage.getItem('accessToken');
        const mediaFormData = new FormData();
        mediaFormData.append('file', formData.mediaFile);

        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
        const uploadResponse = await fetch('http://localhost:8090/api/media/upload', {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${token}`
          },
          body: mediaFormData,
        });

        if (!uploadResponse.ok) {
          const errorText = await uploadResponse.text();
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', errorText);
          throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }

        let mediaUrl = await uploadResponse.text();
        console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', mediaUrl);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π URL
        if (!mediaUrl.startsWith('http')) {
          mediaUrl = `http://localhost:8090/api/media/${mediaUrl}`;
        }
        
        mediaUrls = [mediaUrl];
      }

      // 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ API
      const apiPayload: EventCreateData = {
        eventType: formData.eventType,
        title: formData.title.trim(),
        description: formData.description.trim(),
        content: formData.content.trim() || formData.description.trim(),
        author: user.username, // –í—Å–µ–≥–¥–∞ username —Å–æ–∑–¥–∞—Ç–µ–ª—è
        city: formData.city,
        location: {
          x: formData.location.x,
          y: formData.location.y,
        },
        mediaUrl: mediaUrls,
        tags: formData.tags.length > 0 ? formData.tags : ['event'],
        metadata: {
          address: formData.location.address || undefined,
          scheduledDate: formData.dateTime,
          // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
          ...(formData.isForCommunity && {
            createdForCommunity: true,
            communityId: formData.communityId,
            communityName: formData.communityName,
          })
        }
      };

      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥:', JSON.stringify(apiPayload, null, 2));

      // 3. –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
      const token = localStorage.getItem('accessToken');
      const response = await fetch('http://localhost:8090/api/events/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify(apiPayload),
      });

      const responseText = await response.text();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText);

      if (!response.ok) {
        let errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è';
        try {
          const errorData = JSON.parse(responseText);
          errorMessage = errorData.message || errorMessage;
        } catch {
          errorMessage = `–û—à–∏–±–∫–∞ ${response.status}: ${responseText}`;
        }
        throw new Error(errorMessage);
      }

      let result;
      try {
        result = JSON.parse(responseText);
        console.log('–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:', result);
      } catch {
        result = { id: 'created' };
      }
      
      showNotificationMessage(
        `–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ${formData.isForCommunity ? ` –æ—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ "${formData.communityName}"` : ''}!`, 
        true
      );
      
      setTimeout(() => {
        if (formData.isForCommunity && formData.communityId) {
          navigate(`/communities/${formData.communityId}`);
        } else {
          navigate(`/events/${result.id || ''}`);
        }
      }, 1500);

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
      showNotificationMessage(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ', false);
    } finally {
      setIsSubmitting(false);
    }
  };

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const showNotificationMessage = (message: string, success: boolean) => {
    setNotificationMessage(message);
    setIsSuccess(success);
    setShowNotification(true);
    setTimeout(() => setShowNotification(false), 3000);
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (!user) {
    return (
      <div className={styles.container}>
        <div className={styles.error}>
          <h2>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</h2>
          <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
          <button onClick={() => navigate('/login')} className={styles.button}>
            –í–æ–π—Ç–∏
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.profileSection}>
        <div className={styles.sectionTitle}>
          –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
          {formData.isForCommunity && (
            <div className={styles.communityBadge}>
              <span>–û—Ç –∏–º–µ–Ω–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: <strong>{formData.communityName}</strong></span>
            </div>
          )}
        </div>

        <form onSubmit={handleSubmit}>
          <div className={styles.formSection}>
            {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è */}
            <div className={styles.profileHeader}>
              <div className={styles.profileImageContainer}>
                <img
                  src={formData.mediaFile ? URL.createObjectURL(formData.mediaFile) : "/api/placeholder/150/150"}
                  alt="–û–±–ª–æ–∂–∫–∞ —Å–æ–±—ã—Ç–∏—è"
                  className={styles.profileImage}
                />
                <label htmlFor="imageUpload" className={styles.imageUpload}>
                  üì∑
                </label>
                <input
                  type="file"
                  id="imageUpload"
                  accept="image/*"
                  onChange={handleImageChange}
                  style={{ display: 'none' }}
                />
                {errors.mediaFile && <div className={styles.errorText}>{errors.mediaFile}</div>}
              </div>

              <div className={styles.profileInfo}>
                {/* –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è */}
                <div className={styles.formGroup}>
                  <label htmlFor="title" className={styles.label}>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è *</label>
                  <input
                    type="text"
                    id="title"
                    name="title"
                    value={formData.title}
                    onChange={handleInputChange}
                    className={`${styles.input} ${errors.title ? styles.inputError : ''}`}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
                  />
                  {errors.title && <div className={styles.errorText}>{errors.title}</div>}
                </div>

                {/* –î–∞—Ç–∞ –∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è */}
                <div className={styles.formRow}>
                  <div className={styles.formCol}>
                    <label htmlFor="dateTime" className={styles.label}>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è *</label>
                    <input
                      type="datetime-local"
                      id="dateTime"
                      name="dateTime"
                      value={formData.dateTime}
                      onChange={handleInputChange}
                      className={`${styles.input} ${errors.dateTime ? styles.inputError : ''}`}
                    />
                    {errors.dateTime && <div className={styles.errorText}>{errors.dateTime}</div>}
                  </div>

                  <div className={styles.formCol}>
                    <label htmlFor="eventType" className={styles.label}>–¢–∏–ø —Å–æ–±—ã—Ç–∏—è *</label>
                    <select
                      id="eventType"
                      name="eventType"
                      value={formData.eventType}
                      onChange={handleInputChange}
                      className={styles.select}
                    >
                      <option value="REGULAR">–û–±—ã—á–Ω–æ–µ</option>
                      <option value="EMERGENCY">–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ</option>
                    </select>
                  </div>
                </div>

                {/* –ì–æ—Ä–æ–¥ */}
                <div className={styles.formGroup}>
                  <label className={styles.label}>–ì–æ—Ä–æ–¥ *</label>
                  <CitySelect
                    value={formData.city}
                    onChange={handleCityChange}
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"
                    error={errors.city}
                    required
                  />
                </div>
              </div>
            </div>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <div className={styles.formGroup}>
              <label htmlFor="description" className={styles.label}>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è *</label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                className={`${styles.textarea} ${errors.description ? styles.inputError : ''}`}
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ"
                rows={4}
              />
              {errors.description && <div className={styles.errorText}>{errors.description}</div>}
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className={styles.formGroup}>
              <label htmlFor="content" className={styles.label}>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</label>
              <textarea
                id="content"
                name="content"
                value={formData.content}
                onChange={handleInputChange}
                className={styles.textarea}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è"
                rows={3}
              />
            </div>

            {/* –¢–µ–≥–∏ */}
            <div className={styles.formGroup}>
              <label className={styles.label}>–¢–µ–≥–∏ —Å–æ–±—ã—Ç–∏—è</label>
              <div className={styles.tagsContainer}>
                {['—Å–ø–æ—Ä—Ç', '–º—É–∑—ã–∫–∞', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–µ–¥–∞', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è'].map(tag => (
                  <label key={tag} className={styles.tagLabel}>
                    <input
                      type="checkbox"
                      value={tag}
                      checked={formData.tags.includes(tag)}
                      onChange={handleTagsChange}
                    />
                    <span className={styles.tagText}>#{tag}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* –ö–∞—Ä—Ç–∞ */}
            <div className={styles.mapSection}>
              <label className={styles.label}>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è *</label>
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã */}
              {mapLoading && !mapError && (
                <div className={styles.mapLoading}>
                  <div className={styles.spinner}></div>
                  <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
                </div>
              )}
              
              {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */}
              <div
                ref={mapCallbackRef}
                className={styles.mapContainer}
                style={{ 
                  display: mapError ? 'none' : 'block',
                  opacity: mapLoading ? 0.5 : 1
                }}
              />
              
              {/* –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã */}
              {mapError && (
                <div className={styles.mapError}>
                  <p>üó∫Ô∏è {mapError}</p>
                  <p>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:</p>
                  <div className={styles.coordinatesInput}>
                    <input
                      type="number"
                      placeholder="–î–æ–ª–≥–æ—Ç–∞ (lng)"
                      step="any"
                      value={formData.location.x}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        location: { ...prev.location, x: parseFloat(e.target.value) || 0 }
                      }))}
                      className={styles.input}
                    />
                    <input
                      type="number"
                      placeholder="–®–∏—Ä–æ—Ç–∞ (lat)"
                      step="any"
                      value={formData.location.y}
                      onChange={(e) => setFormData(prev => ({
                        ...prev,
                        location: { ...prev.location, y: parseFloat(e.target.value) || 0 }
                      }))}
                      className={styles.input}
                    />
                  </div>
                </div>
              )}
              
              {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å */}
              {formData.location.address && (
                <div className={styles.selectedAddress}>
                  üìç {formData.location.address}
                </div>
              )}
              
              {/* –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ */}
              {errors.location && <div className={styles.errorText}>{errors.location}</div>}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className={styles.buttonGroup}>
              <button
                type="button"
                className={`${styles.button} ${styles.buttonSecondary}`}
                onClick={() => {
                  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–∑–∞–¥
                  if (formData.isForCommunity && formData.communityId) {
                    navigate(`/communities/${formData.communityId}`);
                  } else {
                    navigate(-1);
                  }
                }}
                disabled={isSubmitting}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                className={styles.button}
                disabled={isSubmitting}
              >
                {isSubmitting ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'}
              </button>
            </div>
          </div>
        </form>
      </div>

      {showNotification && (
        <div className={`${styles.notification} ${isSuccess ? styles.notificationSuccess : styles.notificationError}`}>
          {notificationMessage}
        </div>
      )}
    </div>
  );
};

export default EventCreatePage;