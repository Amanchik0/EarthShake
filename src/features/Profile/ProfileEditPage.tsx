import React, { useState } from 'react';
import { useAuth } from '../../components/auth/AuthContext';
import ProfilePhotoUpload from '../../components/ProfileEdit/ProfilePhotoUpload';
import ProfileForm from '../../components/ProfileEdit/ProfileForm';
import UsernameWarning from './UsernameWarning/UsernameWarning';
import { ProfileFormData, FullProfile } from '../../types/profile';
import styles from './ProfileEditPage.module.css';

interface ProfileEditPageProps {
  initialData: ProfileFormData;
  currentProfile: FullProfile;
  onClose: () => void;
  onSubmit: (updatedProfile: FullProfile) => Promise<void>;
}

const ProfileEditPage: React.FC<ProfileEditPageProps> = ({ 
  initialData, 
  currentProfile, 
  onClose, 
  onSubmit 
}) => {
  const { user, isLoading } = useAuth();
  const [photoUrl, setPhotoUrl] = useState<string>(initialData.imageUrl || '');
  const [formData, setFormData] = useState<ProfileFormData>(initialData);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [showUsernameWarning, setShowUsernameWarning] = useState<boolean>(false);
  const [pendingFormData, setPendingFormData] = useState<ProfileFormData | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è username –≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö
  const updateUsernameInAllCommunities = async (oldUsername: string, newUsername: string) => {
    const result = { success: true, updatedCount: 0, errors: [] as string[] };
    
    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch('http://localhost:8090/api/community/get-all', {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤: ${response.status}`);
      }

      const data = await response.json();
      const communities = data.content || [];

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${communities.length} —Å–æ–æ–±—â–µ—Å—Ç–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è username`);

      for (const community of communities) {
        let needsUpdate = false;
        const updatedCommunity = { ...community };

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞
        if (community.author === oldUsername) {
          updatedCommunity.author = newUsername;
          needsUpdate = true;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (community.users && community.users.includes(oldUsername)) {
          updatedCommunity.users = community.users.map((username: string) => 
            username === oldUsername ? newUsername : username
          );
          needsUpdate = true;
        }

        if (needsUpdate) {
          try {
            const updateResponse = await fetch('http://localhost:8090/api/community/update', {
              method: 'PUT',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(updatedCommunity)
            });

            if (updateResponse.ok) {
              result.updatedCount++;
              console.log(` –°–æ–æ–±—â–µ—Å—Ç–≤–æ "${community.name}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
            } else {
              const errorText = await updateResponse.text().catch(() => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
              result.errors.push(`–°–æ–æ–±—â–µ—Å—Ç–≤–æ "${community.name}": ${errorText}`);
            }
          } catch (error) {
            result.errors.push(`–°–æ–æ–±—â–µ—Å—Ç–≤–æ "${community.name}": ${error}`);
          }
        }
      }

      if (result.errors.length > 0) {
        result.success = false;
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤:', error);
      result.success = false;
      result.errors.push(`–û–±—â–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    }

    return result;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
  const checkUsernameAvailability = async (username: string): Promise<boolean> => {
    if (username === currentProfile.username) {
      return true; // –¢–µ–∫—É—â–∏–π username –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
    }

    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch(
        `http://localhost:8090/api/users/get-by-username/${username}`,
        {
          headers: { Authorization: `Bearer ${token}` }
        }
      );
      
      if (response.ok) {
        const userData = await response.json();
        // –ï—Å–ª–∏ userData –Ω–µ null –∏ –Ω–µ –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç username –∑–∞–Ω—è—Ç
        return userData === null || userData === undefined;
      } else if (response.status === 404) {
        // 404 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - username —Å–≤–æ–±–æ–¥–µ–Ω
        return true;
      } else {
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - —Å—á–∏—Ç–∞–µ–º username –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        return false;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ username:', error);
      return false;
    }
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = async (data: ProfileFormData): Promise<Record<string, string>> => {
    const errors: Record<string, string> = {};

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ username
    if (!data.username.trim()) {
      errors.username = 'Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (data.username.length < 3) {
      errors.username = 'Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
    } else if (!/^[a-zA-Z0-9_]+$/.test(data.username)) {
      errors.username = 'Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
      errors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω)
    if (data.phoneNumber) {
      const phoneRegex = /^\+?[1-9]\d{10,14}$/;
      if (!phoneRegex.test(data.phoneNumber.replace(/\s/g, ''))) {
        errors.phoneNumber = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π
    if (data.newPassword) {
      if (data.newPassword.length < 6) {
        errors.newPassword = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
      }
      if (data.newPassword !== data.confirmNewPassword) {
        errors.confirmNewPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
      }
      if (!data.currentPassword) {
        errors.currentPassword = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–º–µ–Ω—ã';
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
    if (!data.firstName.trim()) {
      errors.firstName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
    if (!data.city.trim()) {
      errors.city = '–ì–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }

    return errors;
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
  const handlePhotoChange = async (file: File): Promise<void> => {
    const token = localStorage.getItem('accessToken');
    const fd = new FormData();
    fd.append('file', file);
    
    try {
      const res = await fetch('http://localhost:8090/api/media/upload', {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
        body: fd,
      });
      
      if (!res.ok) {
        const errorText = await res.text().catch(() => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${res.status} - ${errorText}`);
      }
      
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å URL, –∞ –Ω–µ JSON
      const responseText = await res.text();
      console.log('Response from API:', responseText); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π URL
      let fullUrl = responseText;
      
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ ID —Ñ–∞–π–ª–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
      if (!responseText.startsWith('http')) {
        fullUrl = `http://localhost:8090/api/media/${responseText}`;
      }
      
      setPhotoUrl(fullUrl);
      setFormData(prev => ({ ...prev, imageUrl: fullUrl }));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      const notification = document.createElement('div');
      notification.textContent = '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!';
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 8px 16px;
        border-radius: 4px;
        z-index: 1001;
        font-size: 14px;
      `;
      document.body.appendChild(notification);
      
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 2000);
      
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', err);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorNotification = document.createElement('div');
      errorNotification.textContent = err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ';
      errorNotification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #f44336;
        color: white;
        padding: 8px 16px;
        border-radius: 4px;
        z-index: 1001;
        font-size: 14px;
      `;
      document.body.appendChild(errorNotification);
      
      setTimeout(() => {
        if (document.body.contains(errorNotification)) {
          document.body.removeChild(errorNotification);
        }
      }, 3000);
      
      throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ ProfilePhotoUpload
    }
  };

  const handleCancel = () => {
    if (!isSubmitting) onClose();
  };

  const handleSubmit = async (data: ProfileFormData) => {
    setIsSubmitting(true);
    setValidationErrors({});

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      const errors = await validateForm(data);
      if (Object.keys(errors).length > 0) {
        setValidationErrors(errors);
        return;
      }

      const usernameChanged = data.username !== currentProfile.username;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è)
      if (usernameChanged) {
        const isAvailable = await checkUsernameAvailability(data.username);
        if (!isAvailable) {
          setValidationErrors({ username: '–≠—Ç–æ—Ç username —É–∂–µ –∑–∞–Ω—è—Ç' });
          return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ username
        setPendingFormData(data);
        setShowUsernameWarning(true);
        return; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      }

      // –ï—Å–ª–∏ username –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      await saveProfile(data);
      
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', err);
      alert(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleUsernameWarningConfirm = async () => {
    if (!pendingFormData) return;
    
    setShowUsernameWarning(false);
    setIsSubmitting(true);
    
    try {
      await saveProfile(pendingFormData);
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', err);
      alert(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    } finally {
      setIsSubmitting(false);
      setPendingFormData(null);
    }
  };

  const handleUsernameWarningCancel = () => {
    setShowUsernameWarning(false);
    setPendingFormData(null);
    setIsSubmitting(false);
  };

  const saveProfile = async (data: ProfileFormData) => {
    const usernameChanged = data.username !== currentProfile.username;
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
      const token = localStorage.getItem('accessToken');
      const profileResponse = await fetch(
        `http://localhost:8090/api/users/get-by-username/${currentProfile.username}`,
        { 
          headers: { 
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
          } 
        }
      );
      
      if (!profileResponse.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è');
      }
      
      const actualProfile = await profileResponse.json();

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ eventIds –∏ communityId
      const updateData = {
        id: actualProfile.id,
        username: data.username,
        email: data.email,
        firstName: data.firstName || null,
        lastName: data.lastName || null,
        password: data.newPassword || actualProfile.password, // –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
        role: actualProfile.role,
        city: data.city,
        imageUrl: photoUrl || actualProfile.imageUrl,
        phoneNumber: data.phoneNumber || null,
        registrationDate: actualProfile.registrationDate,
        eventIds: actualProfile.eventIds || [], // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ eventIds
        communityId: actualProfile.communityId || [], // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ communityId
        metadata: {
          ...actualProfile.metadata,
          lastProfileUpdate: new Date().toISOString()
        },
        subscriber: actualProfile.subscriber // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
      };

      const response = await fetch('http://localhost:8090/api/users/update', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(updateData),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
      }

      const updatedProfile = await response.json();
      
      // –ï—Å–ª–∏ username –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      if (usernameChanged) {
        console.log('üîÑ Username –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const updateResult = await updateUsernameInAllCommunities(
          currentProfile.username, 
          data.username
        );
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.textContent = updateResult.success 
          ? `Username —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ ${updateResult.updatedCount} —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö!`
          : `Username –æ–±–Ω–æ–≤–ª–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateResult.updatedCount} —Å–æ–æ–±—â–µ—Å—Ç–≤`;
        notification.style.cssText = `
          position: fixed;
          top: 70px;
          right: 20px;
          background: ${updateResult.success ? '#10b981' : '#f59e0b'};
          color: white;
          padding: 12px 16px;
          border-radius: 8px;
          z-index: 1002;
          font-size: 14px;
          max-width: 400px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        `;
        document.body.appendChild(notification);
        
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, updateResult.success ? 4000 : 6000);
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ FullProfile —Ñ–æ—Ä–º–∞—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤
      const fullProfileData: FullProfile = {
        id: updatedProfile.id,
        username: updatedProfile.username,
        email: updatedProfile.email,
        password: updatedProfile.password,
        firstName: updatedProfile.firstName,
        lastName: updatedProfile.lastName,
        role: updatedProfile.role,
        city: updatedProfile.city,
        imageUrl: updatedProfile.imageUrl,
        phoneNumber: updatedProfile.phoneNumber,
        registrationDate: updatedProfile.registrationDate,
        metadata: updatedProfile.metadata,
        subscriber: updatedProfile.subscriber,
        eventIds: updatedProfile.eventIds || [],
        communityIds: updatedProfile.communityId || []
      };

      await onSubmit(fullProfileData);
      onClose();
    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', err);
      throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    }
  };

  if (isLoading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>;

  return (
    <div className={styles.profileContainer}>
      <button
        type="button"
        className={styles.closeButton}
        aria-label="–ó–∞–∫—Ä—ã—Ç—å"
        onClick={handleCancel}
        disabled={isSubmitting}
      >
        &times;
      </button>
      
      <h1>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</h1>
      
      <div className={styles.content}>
        <ProfilePhotoUpload 
          photoUrl={photoUrl} 
          onPhotoChange={handlePhotoChange} 
        />
        
        <ProfileForm
          initialData={formData}
          onCancel={handleCancel}
          onSubmit={handleSubmit}
          isSubmitting={isSubmitting}
          validationErrors={validationErrors}
        />
      </div>
      
      {isSubmitting && (
        <div className={styles.loadingOverlay}>
          <div className={styles.spinner}>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...</div>
        </div>
      )}
      
      <UsernameWarning
        currentUsername={currentProfile.username}
        newUsername={pendingFormData?.username || ''}
        onConfirm={handleUsernameWarningConfirm}
        onCancel={handleUsernameWarningCancel}
        isVisible={showUsernameWarning}
      />
    </div>
  );
};

export default ProfileEditPage;