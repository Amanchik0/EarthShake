
// services/usernameUpdateService.ts

interface UpdateUsernameResult {
  success: boolean;
  updatedCommunities: number;
  updatedEvents: number;
  errors: string[];
}

export class UsernameUpdateService {
  private static async makeAuthenticatedRequest(url: string, options: RequestInit = {}) {
    const token = localStorage.getItem('accessToken');
    return fetch(url, {
      ...options,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
        ...options.headers
      }
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç username –≤–æ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö
   */
  static async updateUsernameInAllRecords(oldUsername: string, newUsername: string): Promise<UpdateUsernameResult> {
    const result: UpdateUsernameResult = {
      success: true,
      updatedCommunities: 0,
      updatedEvents: 0,
      errors: []
    };

    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ username: ${oldUsername} ‚Üí ${newUsername}`);

    try {
      // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      const communitiesResult = await this.updateUsernameInCommunities(oldUsername, newUsername);
      result.updatedCommunities = communitiesResult.updated;
      result.errors.push(...communitiesResult.errors);

      // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–ª–∏ –∞–≤—Ç–æ—Ä–æ–º
      const eventsResult = await this.updateUsernameInEvents(oldUsername, newUsername);
      result.updatedEvents = eventsResult.updated;
      result.errors.push(...eventsResult.errors);

      // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, —Å—á–∏—Ç–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π
      if (result.errors.length > 0) {
        result.success = false;
        console.warn(' –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏:', result.errors);
      } else {
        console.log(' Username —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤–æ –≤—Å–µ—Ö –∑–∞–ø–∏—Å—è—Ö');
      }

    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username:', error);
      result.success = false;
      result.errors.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    }

    return result;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç username –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö
   */
  private static async updateUsernameInCommunities(oldUsername: string, newUsername: string) {
    const result = { updated: 0, errors: [] as string[] };

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
      const response = await this.makeAuthenticatedRequest('http://localhost:8090/api/community/get-all');
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤: ${response.status}`);
      }

      const communitiesData = await response.json();
      const communities = communitiesData.content || [];

      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${communities.length} —Å–æ–æ–±—â–µ—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
      for (const community of communities) {
        try {
          let needsUpdate = false;
          const updatedCommunity = { ...community };

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∞
          if (community.author === oldUsername) {
            updatedCommunity.author = newUsername;
            needsUpdate = true;
            console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ "${community.name}"`);
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          if (community.users && community.users.includes(oldUsername)) {
            updatedCommunity.users = community.users.map((username: string) => 
              username === oldUsername ? newUsername : username
            );
            needsUpdate = true;
            console.log(`üë• –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ "${community.name}"`);
          }

          // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
          if (needsUpdate) {
            const updateResponse = await this.makeAuthenticatedRequest(
              'http://localhost:8090/api/community/update',
              {
                method: 'PUT',
                body: JSON.stringify(updatedCommunity)
              }
            );

            if (updateResponse.ok) {
              result.updated++;
              console.log(` –°–æ–æ–±—â–µ—Å—Ç–≤–æ "${community.name}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
            } else {
              const errorText = await updateResponse.text().catch(() => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
              result.errors.push(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ "${community.name}": ${errorText}`);
            }
          }

        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ "${community.name}":`, error);
          result.errors.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ "${community.name}": ${error}`);
        }
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤:', error);
      result.errors.push(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤: ${error}`);
    }

    return result;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç username –≤ —Å–æ–±—ã—Ç–∏—è—Ö
   */
  private static async updateUsernameInEvents(oldUsername: string, newUsername: string) {
    const result = { updated: 0, errors: [] as string[] };

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è (–Ω—É–∂–µ–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π)
      // –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —à–∞–≥
      const response = await this.makeAuthenticatedRequest('http://localhost:8090/api/events/get-all');
      
      if (!response.ok) {
        if (response.status === 404) {
          console.log('‚ÑπÔ∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π');
          return result;
        }
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: ${response.status}`);
      }

      const eventsData = await response.json();
      const events = Array.isArray(eventsData) ? eventsData : eventsData.content || [];

      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
      for (const event of events) {
        try {
          let needsUpdate = false;
          const updatedEvent = { ...event };

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∞
          if (event.author === oldUsername) {
            updatedEvent.author = newUsername;
            needsUpdate = true;
            console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è "${event.title}"`);
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          if (event.usersIds && event.usersIds.includes(oldUsername)) {
            updatedEvent.usersIds = event.usersIds.map((username: string) => 
              username === oldUsername ? newUsername : username
            );
            needsUpdate = true;
            console.log(`üë• –û–±–Ω–æ–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ "${event.title}"`);
          }

          // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
          if (needsUpdate) {
            const updateResponse = await this.makeAuthenticatedRequest(
              `http://localhost:8090/api/events/update/${event.id}`,
              {
                method: 'PUT',
                body: JSON.stringify(updatedEvent)
              }
            );

            if (updateResponse.ok) {
              result.updated++;
              console.log(` –°–æ–±—ã—Ç–∏–µ "${event.title}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
            } else {
              const errorText = await updateResponse.text().catch(() => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
              result.errors.push(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è "${event.title}": ${errorText}`);
            }
          }

        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è "${event.title}":`, error);
          result.errors.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è "${event.title}": ${error}`);
        }
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π:', error);
      result.errors.push(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: ${error}`);
    }

    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ username –≤ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∑–∞–ø–∏—Å—è—Ö
   */
  static async checkUsernameUsage(username: string): Promise<{
    communities: number;
    events: number;
    total: number;
  }> {
    const usage = { communities: 0, events: 0, total: 0 };

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
      const communitiesResponse = await this.makeAuthenticatedRequest('http://localhost:8090/api/community/get-all');
      if (communitiesResponse.ok) {
        const communitiesData = await communitiesResponse.json();
        const communities = communitiesData.content || [];
        
        usage.communities = communities.filter((community: any) => 
          community.author === username || 
          (community.users && community.users.includes(username))
        ).length;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω)
      try {
        const eventsResponse = await this.makeAuthenticatedRequest('http://localhost:8090/api/events/get-all');
        if (eventsResponse.ok) {
          const eventsData = await eventsResponse.json();
          const events = Array.isArray(eventsData) ? eventsData : eventsData.content || [];
          
          usage.events = events.filter((event: any) => 
            event.author === username || 
            (event.usersIds && event.usersIds.includes(username))
          ).length;
        }
      } catch (error) {
        console.log('‚ÑπÔ∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç —Å–æ–±—ã—Ç–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      }

      usage.total = usage.communities + usage.events;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è username:', error);
    }

    return usage;
  }
}