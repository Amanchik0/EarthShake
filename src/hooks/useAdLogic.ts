import { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { useAuth } from "../components/auth/AuthContext";

interface AdData {
  id: string;
  name: string;
  mediaUrl: string;
  type: string;
  targetUrl: string;
  active: boolean;
  showCount: number;
  clickCount: number;
  finishDate: string;
}

interface AdDisplayData {
  name: string;
  mediaUrl: string;
  targetUrl: string;
}

export function useAdLogic() {
  const { user } = useAuth();
  const location = useLocation();
  const [adClicks, setAdClicks] = useState(0);
  const [adData, setAdData] = useState<AdDisplayData | null>(null);
  const [currentAd, setCurrentAd] = useState<AdData | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –∏–∑ API
  const fetchAdvertisement = async (): Promise<AdData | null> => {
    try {
      console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–ª–∞–º—É...');
      const response = await fetch('http://localhost:8090/api/advertisement/get-advertisement');
      if (!response.ok) {
        console.warn(' –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–ª–∞–º—É:', response.status);
        return null;
      }
      const data = await response.json();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∫–ª–∞–º–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞
      if (data && data.active && new Date(data.finishDate) > new Date()) {
        console.log(' –†–µ–∫–ª–∞–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data);
        return data;
      }
      console.log(' –†–µ–∫–ª–∞–º–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞');
      return null;
    } catch (error) {
      console.error(' –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º—ã:', error);
      return null;
    }
  };

  const updateShowCount = async (adId: string) => {
    try {
      console.log(' –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:', adId);
      await fetch(`http://localhost:8090/api/advertisement/${adId}/show`, {
        method: 'POST'
      });
      console.log(' –°—á–µ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error(' –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–∫–∞–∑–æ–≤:', error);
    }
  };

  const updateClickCount = async (adId: string) => {
    try {
      console.log(' –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:', adId);
      const response = await fetch(`http://localhost:8090/api/advertisement/increment/${adId}`, {
        method: 'PATCH'
      });
      
      if (response.ok) {
        console.log(' –°—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        console.error(' –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤:', response.status);
      }
    } catch (error) {
      console.error(' –û—à–∏–±–∫–∞ PATCH –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤:', error);
    }
  };

  useEffect(() => {
    setAdClicks(prev => prev + 1);
    console.log(' –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤:', adClicks + 1);
  }, [location.pathname]);

  useEffect(() => {
    const loadAdvertisement = async () => {
      const ad = await fetchAdvertisement();
      setCurrentAd(ad);
    };
    
    loadAdvertisement();
  }, []);

  useEffect(() => {
    let timer: ReturnType<typeof setTimeout> | null = null;

    const shouldShowAd = adClicks > 0 && 
                        adClicks % 10 === 0 && 
                        currentAd && 
                        (!user || !user.isSubscriber);

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã:', {
      adClicks,
      hasCurrentAd: !!currentAd,
      isUserLoggedIn: !!user,
      isSubscriber: user?.isSubscriber,
      shouldShowAd
    });

    if (shouldShowAd) {
      console.log('üì∫ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
      
      setAdData({
        name: currentAd.name,
        mediaUrl: currentAd.mediaUrl,
        targetUrl: currentAd.targetUrl
      });

      updateShowCount(currentAd.id);

      timer = setTimeout(() => {
        console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É');
        setAdData(null);
      }, 10000);
    } else if (user?.isSubscriber) {
      console.log(' –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, —Ä–µ–∫–ª–∞–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    }

    return () => {
      if (timer) clearTimeout(timer);
    };
  }, [adClicks, currentAd, user?.isSubscriber]);

  const handleCloseAd = () => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Ä–µ–∫–ª–∞–º—É');
    setAdData(null);
  };

  const handleAdClick = () => {
    if (currentAd) {
      console.log(' –ö–ª–∏–∫ –ø–æ —Ä–µ–∫–ª–∞–º–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å');
      updateClickCount(currentAd.id);
    }
  };

  return { 
    adData, 
    handleCloseAd, 
    handleAdClick,
    currentAd 
  };
}