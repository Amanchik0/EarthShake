// hooks/useCommunityAPI.ts

import { useState, useCallback } from 'react';
import { CommunityCreateData, CommunityCreateResponse } from '../types/community';

interface UseCommunityAPIReturn {
  loading: boolean;
  error: string | null;
  createCommunity: (communityData: CommunityCreateData) => Promise<CommunityCreateResponse | null>;
  uploadCommunityImage: (file: File) => Promise<string | null>;
  clearError: () => void;
}

const API_BASE_URL = 'http://localhost:8090/api';

export const useCommunityAPI = (): UseCommunityAPIReturn => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
  const createCommunity = useCallback(async (communityData: CommunityCreateData): Promise<CommunityCreateResponse | null> => {
    try {
      setLoading(true);
      setError(null);

      console.log('üèòÔ∏è –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:', communityData);

      const response = await fetch(`${API_BASE_URL}/community`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(communityData),
      });

      console.log(`üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint: /community, —Å—Ç–∞—Ç—É—Å: ${response.status}`);

      if (!response.ok) {
        let errorDetails = '';
        try {
          const errorText = await response.text();
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
          errorDetails = errorText;
        } catch {}

        if (response.status === 400) {
          throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${errorDetails || '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π'}`);
        }
        if (response.status === 401) {
          throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        }
        if (response.status === 403) {
          throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞');
        }
        if (response.status === 500) {
          throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: ${response.status}`);
      }

      const createdCommunity: CommunityCreateResponse = await response.json();
      console.log('‚úÖ –°–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ:', createdCommunity);
      return createdCommunity;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞';
      setError(errorMessage);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
  const uploadCommunityImage = useCallback(async (file: File): Promise<string | null> => {
    try {
      setLoading(true);
      setError(null);

      console.log('üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', file.name, file.size);

      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!file.type.startsWith('image/')) {
        throw new Error('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }

      if (file.size > 10 * 1024 * 1024) {
        throw new Error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
      }

      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch(`${API_BASE_URL}/media/upload`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        if (response.status === 413) {
          throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
        }
        if (response.status === 415) {
          throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞');
        }
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
      }

      const responseText = await response.text();
      console.log('üì∏ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText);

      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      try {
        const responseData = JSON.parse(responseText);
        if (responseData.url) {
          return responseData.url;
        } else if (responseData.fileName) {
          return `${API_BASE_URL}/media/${responseData.fileName}`;
        }
      } catch {
        // –ï—Å–ª–∏ –Ω–µ JSON, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ URL –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞
        if (responseText.startsWith('http')) {
          return responseText.trim();
        } else {
          return `${API_BASE_URL}/media/${responseText.trim()}`;
        }
      }

      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
      return null;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
      setError(errorMessage);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    loading,
    error,
    createCommunity,
    uploadCommunityImage,
    clearError,
  };
};