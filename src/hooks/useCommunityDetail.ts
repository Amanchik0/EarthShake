// hooks/useCommunityDetail.ts

import { useState, useCallback } from 'react';
import { Community, CommunityDetails, CommunityUpdateData, toCommunityDetails, Member } from '../types/community';

interface User {
  id: string;
  username: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  imageUrl?: string; // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  city?: string;
  registrationDate?: string;
  metadata?: {
    lastProfileUpdate?: string;
  };
}

interface UseCommunityDetailReturn {
  loading: boolean;
  error: string | null;
  community: CommunityDetails | null;
  members: Member[];
  loadCommunity: (id: string) => Promise<void>;
  joinCommunity: (id: string) => Promise<boolean>;
  leaveCommunity: (id: string) => Promise<boolean>;
  updateCommunity: (updateData: CommunityUpdateData) => Promise<boolean>;
  clearError: () => void;
}

const API_BASE_URL = 'http://localhost:8090/api';

export const useCommunityDetail = (currentUserId?: string): UseCommunityDetailReturn => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [community, setCommunity] = useState<CommunityDetails | null>(null);
  const [members, setMembers] = useState<Member[]>([]);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
  const getUserByUsername = useCallback(async (username: string): Promise<User | null> => {
    try {
      console.log(`üë§ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);

      const response = await fetch(`${API_BASE_URL}/users/get-by-username/${username}`);

      if (!response.ok) {
        if (response.status === 404) {
          console.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return null;
        }
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response.status}`);
      }

      const user: User = await response.json();
      console.log(' –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω:', user);
      
      return user;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      return null;
    }
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUserCommunity = useCallback(async (
    communityId: string, 
    userId: string, 
    action: 'insert' | 'delete'
  ): Promise<boolean> => {
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${action} —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ${communityId}`);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º action –≤ –±—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const flagValue = action === 'insert' ? 'true' : 'false';

      const response = await fetch(
        `${API_BASE_URL}/users/add-or-delete-community/${communityId}/${userId}/${flagValue}`, 
        {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );

      console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ PATCH: ${response.status}`);
      console.log(`üîó URL –∑–∞–ø—Ä–æ—Å–∞: ${API_BASE_URL}/users/add-or-delete-community/${communityId}/${userId}/${flagValue}`);

      if (!response.ok) {
        let errorDetails = '';
        try {
          const errorText = await response.text();
          console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ PATCH:', errorText);
          errorDetails = errorText;
        } catch (e) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

        console.warn(` PATCH –∑–∞–ø—Ä–æ—Å –Ω–µ—É–¥–∞—á–µ–Ω (${response.status}), –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º`);
        return false; // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
      }

      console.log(' PATCH –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ PATCH –∑–∞–ø—Ä–æ—Å–∞:', err);
      return false; // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
  const loadMembers = useCallback(async (usernames: string[]): Promise<void> => {
    if (!usernames || usernames.length === 0) {
      setMembers([]);
      return;
    }

    try {
      console.log('üë• –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', usernames);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å)
      const membersToLoad = usernames.slice(0, 10);
      
      const memberPromises = membersToLoad.map(async (username) => {
        try {
          const user = await getUserByUsername(username);
          if (user) {
            return {
              id: user.id,
              name: user.firstName && user.lastName ? 
                `${user.firstName} ${user.lastName}` : 
                user.username,
              avatarUrl: user.imageUrl || '/api/placeholder/50/50' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
            };
          } else {
            // Fallback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
            return {
              id: username,
              name: username,
              avatarUrl: '/api/placeholder/50/50'
            };
          }
        } catch (error) {
          console.warn(` –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}:`, error);
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
          return {
            id: username,
            name: username,
            avatarUrl: '/api/placeholder/50/50'
          };
        }
      });

      const loadedMembers = await Promise.all(memberPromises);
      console.log(' –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', loadedMembers);
      setMembers(loadedMembers);
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', err);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
      const fallbackMembers = usernames.slice(0, 10).map((username) => ({
        id: username,
        name: username,
        avatarUrl: '/api/placeholder/50/50'
      }));
      setMembers(fallbackMembers);
    }
  }, [getUserByUsername]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–æ ID
  const loadCommunity = useCallback(async (id: string): Promise<void> => {
    try {
      setLoading(true);
      setError(null);

      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ID: ${id}`);
      
      const response = await fetch(`${API_BASE_URL}/community/${id}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        if (response.status === 500) {
          throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞: ${response.status}`);
      }

      const communityData: Community = await response.json();
      console.log(' –°–æ–æ–±—â–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', communityData);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const communityDetails = toCommunityDetails(communityData, currentUserId);
      setCommunity(communityDetails);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      await loadMembers(communityData.users);
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [currentUserId, loadMembers]);

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
  const updateCommunity = useCallback(async (updateData: CommunityUpdateData): Promise<boolean> => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ:', updateData);

      const response = await fetch(`${API_BASE_URL}/community/update`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(updateData),
      });

      console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ PUT: ${response.status}`);

      if (!response.ok) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        let errorDetails = '';
        try {
          const errorText = await response.text();
          console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
          errorDetails = errorText;
        } catch (e) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

        if (response.status === 404) {
          throw new Error('–°–æ–æ–±—â–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        if (response.status === 400) {
          throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${errorDetails || '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è'}`);
        }
        if (response.status === 403) {
          throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞');
        }
        if (response.status === 401) {
          throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        }
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${response.status} - ${errorDetails}`);
      }

      const updatedCommunity: Community = await response.json();
      console.log(' –°–æ–æ–±—â–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', updatedCommunity);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const communityDetails = toCommunityDetails(updatedCommunity, currentUserId);
      setCommunity(communityDetails);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      await loadMembers(updatedCommunity.users);
      
      return true;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞';
      setError(errorMessage);
      return false;
    } finally {
      setLoading(false);
    }
  }, [currentUserId, loadMembers]);

  // –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
  const joinCommunity = useCallback(async (id: string): Promise<boolean> => {
    if (!community || !currentUserId) {
      console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è');
      return false;
    }

    console.log(`ü§ù –í—Å—Ç—É–ø–∞–µ–º –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`, community.users);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    if (community.users.includes(currentUserId)) {
      console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞');
      setError('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞');
      return false;
    }

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
      const user = await getUserByUsername(currentUserId);
      if (!user) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ (–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
      const updatedUsers = [...community.users, currentUserId];
      const updateData: CommunityUpdateData = {
        id: community.id,
        name: community.name,
        description: community.description,
        imageUrls: community.imageUrls,
        numberMembers: community.numberMembers + 1,
        type: community.type,
        createdAt: community.createdAt,
        rating: community.rating,
        reviewsCount: community.reviewsCount,
        content: community.content,
        city: community.city,
        eventsCount: community.eventsCount,
        postsCount: community.postsCount,
        users: updatedUsers,
        author: community.author,
        listEvents: community.listEvents,
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:', updateData);

      const communityUpdateSuccess = await updateCommunity(updateData);
      if (!communityUpdateSuccess) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ');
      }

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ)
      console.log('üë§ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const userUpdateSuccess = await updateUserCommunity(community.id, user.id, 'insert');
      
      if (!userUpdateSuccess) {
        console.warn(' –°–æ–æ–±—â–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
      }

      console.log(' –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ');
      return true;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ';
      setError(errorMessage);
      return false;
    }
  }, [community, currentUserId, updateCommunity, getUserByUsername, updateUserCommunity]);

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
  const leaveCommunity = useCallback(async (id: string): Promise<boolean> => {
    if (!community || !currentUserId) {
      console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã—Ö–æ–¥–∞');
      return false;
    }

    console.log(`üëã –ü–æ–∫–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`, community.users);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    if (!community.users.includes(currentUserId)) {
      console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞');
      setError('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞');
      return false;
    }

    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
      const user = await getUserByUsername(currentUserId);
      if (!user) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ (—É–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
      const updatedUsers = community.users.filter(userId => userId !== currentUserId);
      const updateData: CommunityUpdateData = {
        id: community.id,
        name: community.name,
        description: community.description,
        imageUrls: community.imageUrls,
        numberMembers: Math.max(0, community.numberMembers - 1),
        type: community.type,
        createdAt: community.createdAt,
        rating: community.rating,
        reviewsCount: community.reviewsCount,
        content: community.content,
        city: community.city,
        eventsCount: community.eventsCount,
        postsCount: community.postsCount,
        users: updatedUsers,
        author: community.author,
        listEvents: community.listEvents,
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞:', updateData);

      const communityUpdateSuccess = await updateCommunity(updateData);
      if (!communityUpdateSuccess) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ');
      }

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ)
      console.log('üë§ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const userUpdateSuccess = await updateUserCommunity(community.id, user.id, 'delete');
      
      if (!userUpdateSuccess) {
        console.warn(' –°–æ–æ–±—â–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
      }

      console.log(' –£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ');
      return true;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞';
      setError(errorMessage);
      return false;
    }
  }, [community, currentUserId, updateCommunity, getUserByUsername, updateUserCommunity]);

  return {
    loading,
    error,
    community,
    members,
    loadCommunity,
    joinCommunity,
    leaveCommunity,
    updateCommunity,
    clearError,
  };
};