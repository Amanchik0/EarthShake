// hooks/useEventAPI.ts

import { useState, useCallback } from 'react';
import { BackendEventData, EventUpdateData } from '../types/event';

interface UseEventAPIReturn {
  loading: boolean;
  error: string | null;
  loadEvent: (id: string) => Promise<BackendEventData | null>;
  updateEvent: (id: string, eventData: EventUpdateData) => Promise<boolean>;
  uploadMedia: (file: File) => Promise<string | null>;
  clearError: () => void;
}

const API_BASE_URL = 'http://localhost:8090/api';

export const useEventAPI = (): UseEventAPIReturn => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ ID
  const loadEvent = useCallback(async (id: string): Promise<BackendEventData | null> => {
    try {
      setLoading(true);
      setError(null);

      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏–µ ID: ${id}`);
      const response = await fetch(`${API_BASE_URL}/events/${id}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        if (response.status === 500) {
          throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è: ${response.status}`);
      }

      const contentType = response.headers.get('content-type');
      if (!contentType || !contentType.includes('application/json')) {
        const textResponse = await response.text();
        console.error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:', textResponse);
        throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç');
      }

      const eventData: BackendEventData = await response.json();
      console.log(' –°–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', eventData);
      return eventData;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏—è';
      setError(errorMessage);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û: ID –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
  const updateEvent = useCallback(async (id: string, eventData: EventUpdateData): Promise<boolean> => {
    try {
      setLoading(true);
      setError(null);

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ID: ${id}`, eventData);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å ID –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (–∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à —Å–µ—Ä–≤–µ—Ä)
      const requestData = {
        id: id,
        ...eventData
      };

      console.log('üì§ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', requestData);

      const response = await fetch(`${API_BASE_URL}/events/update`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      if (!response.ok) {
        let errorDetails = '';
        try {
          const errorText = await response.text();
          console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
          errorDetails = errorText;
        } catch {}

        if (response.status === 400) {
          throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${errorDetails || '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π'}`);
        }
        if (response.status === 403) {
          throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
        }
        if (response.status === 404) {
          throw new Error('–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        if (response.status === 500) {
          throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
        
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${response.status}`);
      }

      console.log(' –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è';
      setError(errorMessage);
      return false;
    } finally {
      setLoading(false);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
  const uploadMedia = useCallback(async (file: File): Promise<string | null> => {
    try {
      setLoading(true);
      setError(null);

      console.log('üì∏ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª:', file.name, file.size);

      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (!file.type.startsWith('image/')) {
        throw new Error('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }

      if (file.size > 10 * 1024 * 1024) {
        throw new Error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
      }

      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch(`${API_BASE_URL}/media/upload`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        if (response.status === 413) {
          throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π');
        }
        if (response.status === 415) {
          throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞');
        }
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
      }

      const responseText = await response.text();
      console.log('üì∏ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText);

      // –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      try {
        const responseData = JSON.parse(responseText);
        if (responseData.url) {
          return responseData.url;
        } else if (responseData.fileName) {
          return `${API_BASE_URL}/media/${responseData.fileName}`;
        }
      } catch {
        // –ï—Å–ª–∏ –Ω–µ JSON, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ URL –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞
        if (responseText.startsWith('http')) {
          return responseText.trim();
        } else {
          return `${API_BASE_URL}/media/${responseText.trim()}`;
        }
      }

      console.log(' –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω');
      return null;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞';
      setError(errorMessage);
      return null;
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    loading,
    error,
    loadEvent,
    updateEvent,
    uploadMedia,
    clearError,
  };
};